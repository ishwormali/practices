//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.276
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AgileOutlook.Extensions.Service {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://epm.verisk.com/jira/rpc/soap/jirasoapservice-v2", ConfigurationName="Service.JiraSoapService")]
    public interface JiraSoapService {
        
        [System.ServiceModel.OperationContractAttribute()]
        void getComment();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetComment(System.AsyncCallback callback, object asyncState);
        
        void EndgetComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getServerInfo();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetServerInfo(System.AsyncCallback callback, object asyncState);
        
        void EndgetServerInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getGroup();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetGroup(System.AsyncCallback callback, object asyncState);
        
        void EndgetGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void createGroup();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegincreateGroup(System.AsyncCallback callback, object asyncState);
        
        void EndcreateGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getConfiguration();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetConfiguration(System.AsyncCallback callback, object asyncState);
        
        void EndgetConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void login();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult Beginlogin(System.AsyncCallback callback, object asyncState);
        
        void Endlogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void createUser();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegincreateUser(System.AsyncCallback callback, object asyncState);
        
        void EndcreateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getUser();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetUser(System.AsyncCallback callback, object asyncState);
        
        void EndgetUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getIssue();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetIssue(System.AsyncCallback callback, object asyncState);
        
        void EndgetIssue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void addComment();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginaddComment(System.AsyncCallback callback, object asyncState);
        
        void EndaddComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void createIssue();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegincreateIssue(System.AsyncCallback callback, object asyncState);
        
        void EndcreateIssue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getComponents();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetComponents(System.AsyncCallback callback, object asyncState);
        
        void EndgetComponents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void updateUser();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginupdateUser(System.AsyncCallback callback, object asyncState);
        
        void EndupdateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void updateGroup();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginupdateGroup(System.AsyncCallback callback, object asyncState);
        
        void EndupdateGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void addUserToGroup();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginaddUserToGroup(System.AsyncCallback callback, object asyncState);
        
        void EndaddUserToGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void removeUserFromGroup();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginremoveUserFromGroup(System.AsyncCallback callback, object asyncState);
        
        void EndremoveUserFromGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void updateIssue();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginupdateIssue(System.AsyncCallback callback, object asyncState);
        
        void EndupdateIssue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void deleteIssue();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegindeleteIssue(System.AsyncCallback callback, object asyncState);
        
        void EnddeleteIssue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getAvailableActions();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetAvailableActions(System.AsyncCallback callback, object asyncState);
        
        void EndgetAvailableActions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getSecurityLevel();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetSecurityLevel(System.AsyncCallback callback, object asyncState);
        
        void EndgetSecurityLevel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void createProject();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegincreateProject(System.AsyncCallback callback, object asyncState);
        
        void EndcreateProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void updateProject();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginupdateProject(System.AsyncCallback callback, object asyncState);
        
        void EndupdateProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getProjectByKey();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetProjectByKey(System.AsyncCallback callback, object asyncState);
        
        void EndgetProjectByKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void removeAllRoleActorsByProject();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginremoveAllRoleActorsByProject(System.AsyncCallback callback, object asyncState);
        
        void EndremoveAllRoleActorsByProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getPriorities();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetPriorities(System.AsyncCallback callback, object asyncState);
        
        void EndgetPriorities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getResolutions();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetResolutions(System.AsyncCallback callback, object asyncState);
        
        void EndgetResolutions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getIssueTypes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetIssueTypes(System.AsyncCallback callback, object asyncState);
        
        void EndgetIssueTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getSubTaskIssueTypes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetSubTaskIssueTypes(System.AsyncCallback callback, object asyncState);
        
        void EndgetSubTaskIssueTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getStatuses();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetStatuses(System.AsyncCallback callback, object asyncState);
        
        void EndgetStatuses(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getIssueTypesForProject();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetIssueTypesForProject(System.AsyncCallback callback, object asyncState);
        
        void EndgetIssueTypesForProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getProjectRoles();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetProjectRoles(System.AsyncCallback callback, object asyncState);
        
        void EndgetProjectRoles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getProjectRole();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetProjectRole(System.AsyncCallback callback, object asyncState);
        
        void EndgetProjectRole(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getProjectRoleActors();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetProjectRoleActors(System.AsyncCallback callback, object asyncState);
        
        void EndgetProjectRoleActors(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getDefaultRoleActors();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetDefaultRoleActors(System.AsyncCallback callback, object asyncState);
        
        void EndgetDefaultRoleActors(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void removeAllRoleActorsByNameAndType();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginremoveAllRoleActorsByNameAndType(System.AsyncCallback callback, object asyncState);
        
        void EndremoveAllRoleActorsByNameAndType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void deleteProjectRole();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegindeleteProjectRole(System.AsyncCallback callback, object asyncState);
        
        void EnddeleteProjectRole(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void updateProjectRole();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginupdateProjectRole(System.AsyncCallback callback, object asyncState);
        
        void EndupdateProjectRole(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void createProjectRole();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegincreateProjectRole(System.AsyncCallback callback, object asyncState);
        
        void EndcreateProjectRole(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void isProjectRoleNameUnique();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginisProjectRoleNameUnique(System.AsyncCallback callback, object asyncState);
        
        void EndisProjectRoleNameUnique(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void addActorsToProjectRole();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginaddActorsToProjectRole(System.AsyncCallback callback, object asyncState);
        
        void EndaddActorsToProjectRole(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void removeActorsFromProjectRole();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginremoveActorsFromProjectRole(System.AsyncCallback callback, object asyncState);
        
        void EndremoveActorsFromProjectRole(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void addDefaultActorsToProjectRole();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginaddDefaultActorsToProjectRole(System.AsyncCallback callback, object asyncState);
        
        void EndaddDefaultActorsToProjectRole(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void removeDefaultActorsFromProjectRole();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginremoveDefaultActorsFromProjectRole(System.AsyncCallback callback, object asyncState);
        
        void EndremoveDefaultActorsFromProjectRole(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getAssociatedNotificationSchemes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetAssociatedNotificationSchemes(System.AsyncCallback callback, object asyncState);
        
        void EndgetAssociatedNotificationSchemes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getAssociatedPermissionSchemes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetAssociatedPermissionSchemes(System.AsyncCallback callback, object asyncState);
        
        void EndgetAssociatedPermissionSchemes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void deleteProject();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegindeleteProject(System.AsyncCallback callback, object asyncState);
        
        void EnddeleteProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getProjectById();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetProjectById(System.AsyncCallback callback, object asyncState);
        
        void EndgetProjectById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getVersions();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetVersions(System.AsyncCallback callback, object asyncState);
        
        void EndgetVersions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getComments();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetComments(System.AsyncCallback callback, object asyncState);
        
        void EndgetComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getFavouriteFilters();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetFavouriteFilters(System.AsyncCallback callback, object asyncState);
        
        void EndgetFavouriteFilters(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void releaseVersion();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginreleaseVersion(System.AsyncCallback callback, object asyncState);
        
        void EndreleaseVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void archiveVersion();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginarchiveVersion(System.AsyncCallback callback, object asyncState);
        
        void EndarchiveVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getFieldsForCreate();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetFieldsForCreate(System.AsyncCallback callback, object asyncState);
        
        void EndgetFieldsForCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getFieldsForEdit();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetFieldsForEdit(System.AsyncCallback callback, object asyncState);
        
        void EndgetFieldsForEdit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getSubTaskIssueTypesForProject();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetSubTaskIssueTypesForProject(System.AsyncCallback callback, object asyncState);
        
        void EndgetSubTaskIssueTypesForProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getCustomFields();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetCustomFields(System.AsyncCallback callback, object asyncState);
        
        void EndgetCustomFields(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void logout();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult Beginlogout(System.AsyncCallback callback, object asyncState);
        
        void Endlogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void editComment();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegineditComment(System.AsyncCallback callback, object asyncState);
        
        void EndeditComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getProjectWithSchemesById();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetProjectWithSchemesById(System.AsyncCallback callback, object asyncState);
        
        void EndgetProjectWithSchemesById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getSecurityLevels();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetSecurityLevels(System.AsyncCallback callback, object asyncState);
        
        void EndgetSecurityLevels(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getProjectAvatars();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetProjectAvatars(System.AsyncCallback callback, object asyncState);
        
        void EndgetProjectAvatars(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void setProjectAvatar();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginsetProjectAvatar(System.AsyncCallback callback, object asyncState);
        
        void EndsetProjectAvatar(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getProjectAvatar();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetProjectAvatar(System.AsyncCallback callback, object asyncState);
        
        void EndgetProjectAvatar(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void deleteProjectAvatar();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegindeleteProjectAvatar(System.AsyncCallback callback, object asyncState);
        
        void EnddeleteProjectAvatar(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getNotificationSchemes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetNotificationSchemes(System.AsyncCallback callback, object asyncState);
        
        void EndgetNotificationSchemes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getPermissionSchemes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetPermissionSchemes(System.AsyncCallback callback, object asyncState);
        
        void EndgetPermissionSchemes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void createPermissionScheme();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegincreatePermissionScheme(System.AsyncCallback callback, object asyncState);
        
        void EndcreatePermissionScheme(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void deletePermissionScheme();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegindeletePermissionScheme(System.AsyncCallback callback, object asyncState);
        
        void EnddeletePermissionScheme(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void addPermissionTo();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginaddPermissionTo(System.AsyncCallback callback, object asyncState);
        
        void EndaddPermissionTo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void deletePermissionFrom();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegindeletePermissionFrom(System.AsyncCallback callback, object asyncState);
        
        void EnddeletePermissionFrom(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getAllPermissions();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetAllPermissions(System.AsyncCallback callback, object asyncState);
        
        void EndgetAllPermissions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void createIssueWithSecurityLevel();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegincreateIssueWithSecurityLevel(System.AsyncCallback callback, object asyncState);
        
        void EndcreateIssueWithSecurityLevel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void hasPermissionToEditComment();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginhasPermissionToEditComment(System.AsyncCallback callback, object asyncState);
        
        void EndhasPermissionToEditComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getFieldsForAction();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetFieldsForAction(System.AsyncCallback callback, object asyncState);
        
        void EndgetFieldsForAction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void progressWorkflowAction();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginprogressWorkflowAction(System.AsyncCallback callback, object asyncState);
        
        void EndprogressWorkflowAction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getIssueById();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetIssueById(System.AsyncCallback callback, object asyncState);
        
        void EndgetIssueById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void addAttachmentsToIssue();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginaddAttachmentsToIssue(System.AsyncCallback callback, object asyncState);
        
        void EndaddAttachmentsToIssue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getAttachmentsFromIssue();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetAttachmentsFromIssue(System.AsyncCallback callback, object asyncState);
        
        void EndgetAttachmentsFromIssue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void addWorklogWithNewRemainingEstimate();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginaddWorklogWithNewRemainingEstimate(System.AsyncCallback callback, object asyncState);
        
        void EndaddWorklogWithNewRemainingEstimate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void addWorklogAndAutoAdjustRemainingEstimate();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginaddWorklogAndAutoAdjustRemainingEstimate(System.AsyncCallback callback, object asyncState);
        
        void EndaddWorklogAndAutoAdjustRemainingEstimate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void addWorklogAndRetainRemainingEstimate();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginaddWorklogAndRetainRemainingEstimate(System.AsyncCallback callback, object asyncState);
        
        void EndaddWorklogAndRetainRemainingEstimate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void deleteWorklogAndAutoAdjustRemainingEstimate();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegindeleteWorklogAndAutoAdjustRemainingEstimate(System.AsyncCallback callback, object asyncState);
        
        void EnddeleteWorklogAndAutoAdjustRemainingEstimate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void deleteWorklogAndRetainRemainingEstimate();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegindeleteWorklogAndRetainRemainingEstimate(System.AsyncCallback callback, object asyncState);
        
        void EnddeleteWorklogAndRetainRemainingEstimate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void deleteWorklogWithNewRemainingEstimate();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegindeleteWorklogWithNewRemainingEstimate(System.AsyncCallback callback, object asyncState);
        
        void EnddeleteWorklogWithNewRemainingEstimate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void updateWorklogAndAutoAdjustRemainingEstimate();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginupdateWorklogAndAutoAdjustRemainingEstimate(System.AsyncCallback callback, object asyncState);
        
        void EndupdateWorklogAndAutoAdjustRemainingEstimate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void updateWorklogAndRetainRemainingEstimate();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginupdateWorklogAndRetainRemainingEstimate(System.AsyncCallback callback, object asyncState);
        
        void EndupdateWorklogAndRetainRemainingEstimate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void updateWorklogWithNewRemainingEstimate();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginupdateWorklogWithNewRemainingEstimate(System.AsyncCallback callback, object asyncState);
        
        void EndupdateWorklogWithNewRemainingEstimate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getWorklogs();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetWorklogs(System.AsyncCallback callback, object asyncState);
        
        void EndgetWorklogs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void hasPermissionToCreateWorklog();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginhasPermissionToCreateWorklog(System.AsyncCallback callback, object asyncState);
        
        void EndhasPermissionToCreateWorklog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void hasPermissionToDeleteWorklog();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginhasPermissionToDeleteWorklog(System.AsyncCallback callback, object asyncState);
        
        void EndhasPermissionToDeleteWorklog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void hasPermissionToUpdateWorklog();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginhasPermissionToUpdateWorklog(System.AsyncCallback callback, object asyncState);
        
        void EndhasPermissionToUpdateWorklog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getResolutionDateByKey();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetResolutionDateByKey(System.AsyncCallback callback, object asyncState);
        
        void EndgetResolutionDateByKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getResolutionDateById();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetResolutionDateById(System.AsyncCallback callback, object asyncState);
        
        void EndgetResolutionDateById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getIssueCountForFilter();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetIssueCountForFilter(System.AsyncCallback callback, object asyncState);
        
        void EndgetIssueCountForFilter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getIssuesFromTextSearch();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetIssuesFromTextSearch(System.AsyncCallback callback, object asyncState);
        
        void EndgetIssuesFromTextSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getIssuesFromTextSearchWithProject();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetIssuesFromTextSearchWithProject(System.AsyncCallback callback, object asyncState);
        
        void EndgetIssuesFromTextSearchWithProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getIssuesFromJqlSearch();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetIssuesFromJqlSearch(System.AsyncCallback callback, object asyncState);
        
        void EndgetIssuesFromJqlSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void setUserPassword();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginsetUserPassword(System.AsyncCallback callback, object asyncState);
        
        void EndsetUserPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void deleteUser();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegindeleteUser(System.AsyncCallback callback, object asyncState);
        
        void EnddeleteUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void deleteGroup();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegindeleteGroup(System.AsyncCallback callback, object asyncState);
        
        void EnddeleteGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void refreshCustomFields();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginrefreshCustomFields(System.AsyncCallback callback, object asyncState);
        
        void EndrefreshCustomFields(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getProjectsNoSchemes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetProjectsNoSchemes(System.AsyncCallback callback, object asyncState);
        
        void EndgetProjectsNoSchemes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void addVersion();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginaddVersion(System.AsyncCallback callback, object asyncState);
        
        void EndaddVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getSavedFilters();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetSavedFilters(System.AsyncCallback callback, object asyncState);
        
        void EndgetSavedFilters(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void createIssueWithParent();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegincreateIssueWithParent(System.AsyncCallback callback, object asyncState);
        
        void EndcreateIssueWithParent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void createIssueWithParentWithSecurityLevel();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegincreateIssueWithParentWithSecurityLevel(System.AsyncCallback callback, object asyncState);
        
        void EndcreateIssueWithParentWithSecurityLevel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void addBase64EncodedAttachmentsToIssue();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginaddBase64EncodedAttachmentsToIssue(System.AsyncCallback callback, object asyncState);
        
        void EndaddBase64EncodedAttachmentsToIssue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void createProjectFromObject();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegincreateProjectFromObject(System.AsyncCallback callback, object asyncState);
        
        void EndcreateProjectFromObject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getSecuritySchemes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetSecuritySchemes(System.AsyncCallback callback, object asyncState);
        
        void EndgetSecuritySchemes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getIssuesFromFilter();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetIssuesFromFilter(System.AsyncCallback callback, object asyncState);
        
        void EndgetIssuesFromFilter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getIssuesFromFilterWithLimit();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetIssuesFromFilterWithLimit(System.AsyncCallback callback, object asyncState);
        
        void EndgetIssuesFromFilterWithLimit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void getIssuesFromTextSearchWithLimit();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BegingetIssuesFromTextSearchWithLimit(System.AsyncCallback callback, object asyncState);
        
        void EndgetIssuesFromTextSearchWithLimit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute()]
        void setNewProjectAvatar();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true)]
        System.IAsyncResult BeginsetNewProjectAvatar(System.AsyncCallback callback, object asyncState);
        
        void EndsetNewProjectAvatar(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface JiraSoapServiceChannel : AgileOutlook.Extensions.Service.JiraSoapService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JiraSoapServiceClient : System.ServiceModel.ClientBase<AgileOutlook.Extensions.Service.JiraSoapService>, AgileOutlook.Extensions.Service.JiraSoapService {
        
        private BeginOperationDelegate onBegingetCommentDelegate;
        
        private EndOperationDelegate onEndgetCommentDelegate;
        
        private System.Threading.SendOrPostCallback ongetCommentCompletedDelegate;
        
        private BeginOperationDelegate onBegingetServerInfoDelegate;
        
        private EndOperationDelegate onEndgetServerInfoDelegate;
        
        private System.Threading.SendOrPostCallback ongetServerInfoCompletedDelegate;
        
        private BeginOperationDelegate onBegingetGroupDelegate;
        
        private EndOperationDelegate onEndgetGroupDelegate;
        
        private System.Threading.SendOrPostCallback ongetGroupCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateGroupDelegate;
        
        private EndOperationDelegate onEndcreateGroupDelegate;
        
        private System.Threading.SendOrPostCallback oncreateGroupCompletedDelegate;
        
        private BeginOperationDelegate onBegingetConfigurationDelegate;
        
        private EndOperationDelegate onEndgetConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback ongetConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginloginDelegate;
        
        private EndOperationDelegate onEndloginDelegate;
        
        private System.Threading.SendOrPostCallback onloginCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateUserDelegate;
        
        private EndOperationDelegate onEndcreateUserDelegate;
        
        private System.Threading.SendOrPostCallback oncreateUserCompletedDelegate;
        
        private BeginOperationDelegate onBegingetUserDelegate;
        
        private EndOperationDelegate onEndgetUserDelegate;
        
        private System.Threading.SendOrPostCallback ongetUserCompletedDelegate;
        
        private BeginOperationDelegate onBegingetIssueDelegate;
        
        private EndOperationDelegate onEndgetIssueDelegate;
        
        private System.Threading.SendOrPostCallback ongetIssueCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddCommentDelegate;
        
        private EndOperationDelegate onEndaddCommentDelegate;
        
        private System.Threading.SendOrPostCallback onaddCommentCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateIssueDelegate;
        
        private EndOperationDelegate onEndcreateIssueDelegate;
        
        private System.Threading.SendOrPostCallback oncreateIssueCompletedDelegate;
        
        private BeginOperationDelegate onBegingetComponentsDelegate;
        
        private EndOperationDelegate onEndgetComponentsDelegate;
        
        private System.Threading.SendOrPostCallback ongetComponentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateUserDelegate;
        
        private EndOperationDelegate onEndupdateUserDelegate;
        
        private System.Threading.SendOrPostCallback onupdateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateGroupDelegate;
        
        private EndOperationDelegate onEndupdateGroupDelegate;
        
        private System.Threading.SendOrPostCallback onupdateGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddUserToGroupDelegate;
        
        private EndOperationDelegate onEndaddUserToGroupDelegate;
        
        private System.Threading.SendOrPostCallback onaddUserToGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginremoveUserFromGroupDelegate;
        
        private EndOperationDelegate onEndremoveUserFromGroupDelegate;
        
        private System.Threading.SendOrPostCallback onremoveUserFromGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateIssueDelegate;
        
        private EndOperationDelegate onEndupdateIssueDelegate;
        
        private System.Threading.SendOrPostCallback onupdateIssueCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteIssueDelegate;
        
        private EndOperationDelegate onEnddeleteIssueDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteIssueCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAvailableActionsDelegate;
        
        private EndOperationDelegate onEndgetAvailableActionsDelegate;
        
        private System.Threading.SendOrPostCallback ongetAvailableActionsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSecurityLevelDelegate;
        
        private EndOperationDelegate onEndgetSecurityLevelDelegate;
        
        private System.Threading.SendOrPostCallback ongetSecurityLevelCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateProjectDelegate;
        
        private EndOperationDelegate onEndcreateProjectDelegate;
        
        private System.Threading.SendOrPostCallback oncreateProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateProjectDelegate;
        
        private EndOperationDelegate onEndupdateProjectDelegate;
        
        private System.Threading.SendOrPostCallback onupdateProjectCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProjectByKeyDelegate;
        
        private EndOperationDelegate onEndgetProjectByKeyDelegate;
        
        private System.Threading.SendOrPostCallback ongetProjectByKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginremoveAllRoleActorsByProjectDelegate;
        
        private EndOperationDelegate onEndremoveAllRoleActorsByProjectDelegate;
        
        private System.Threading.SendOrPostCallback onremoveAllRoleActorsByProjectCompletedDelegate;
        
        private BeginOperationDelegate onBegingetPrioritiesDelegate;
        
        private EndOperationDelegate onEndgetPrioritiesDelegate;
        
        private System.Threading.SendOrPostCallback ongetPrioritiesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetResolutionsDelegate;
        
        private EndOperationDelegate onEndgetResolutionsDelegate;
        
        private System.Threading.SendOrPostCallback ongetResolutionsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetIssueTypesDelegate;
        
        private EndOperationDelegate onEndgetIssueTypesDelegate;
        
        private System.Threading.SendOrPostCallback ongetIssueTypesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSubTaskIssueTypesDelegate;
        
        private EndOperationDelegate onEndgetSubTaskIssueTypesDelegate;
        
        private System.Threading.SendOrPostCallback ongetSubTaskIssueTypesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetStatusesDelegate;
        
        private EndOperationDelegate onEndgetStatusesDelegate;
        
        private System.Threading.SendOrPostCallback ongetStatusesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetIssueTypesForProjectDelegate;
        
        private EndOperationDelegate onEndgetIssueTypesForProjectDelegate;
        
        private System.Threading.SendOrPostCallback ongetIssueTypesForProjectCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProjectRolesDelegate;
        
        private EndOperationDelegate onEndgetProjectRolesDelegate;
        
        private System.Threading.SendOrPostCallback ongetProjectRolesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProjectRoleDelegate;
        
        private EndOperationDelegate onEndgetProjectRoleDelegate;
        
        private System.Threading.SendOrPostCallback ongetProjectRoleCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProjectRoleActorsDelegate;
        
        private EndOperationDelegate onEndgetProjectRoleActorsDelegate;
        
        private System.Threading.SendOrPostCallback ongetProjectRoleActorsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetDefaultRoleActorsDelegate;
        
        private EndOperationDelegate onEndgetDefaultRoleActorsDelegate;
        
        private System.Threading.SendOrPostCallback ongetDefaultRoleActorsCompletedDelegate;
        
        private BeginOperationDelegate onBeginremoveAllRoleActorsByNameAndTypeDelegate;
        
        private EndOperationDelegate onEndremoveAllRoleActorsByNameAndTypeDelegate;
        
        private System.Threading.SendOrPostCallback onremoveAllRoleActorsByNameAndTypeCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteProjectRoleDelegate;
        
        private EndOperationDelegate onEnddeleteProjectRoleDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteProjectRoleCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateProjectRoleDelegate;
        
        private EndOperationDelegate onEndupdateProjectRoleDelegate;
        
        private System.Threading.SendOrPostCallback onupdateProjectRoleCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateProjectRoleDelegate;
        
        private EndOperationDelegate onEndcreateProjectRoleDelegate;
        
        private System.Threading.SendOrPostCallback oncreateProjectRoleCompletedDelegate;
        
        private BeginOperationDelegate onBeginisProjectRoleNameUniqueDelegate;
        
        private EndOperationDelegate onEndisProjectRoleNameUniqueDelegate;
        
        private System.Threading.SendOrPostCallback onisProjectRoleNameUniqueCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddActorsToProjectRoleDelegate;
        
        private EndOperationDelegate onEndaddActorsToProjectRoleDelegate;
        
        private System.Threading.SendOrPostCallback onaddActorsToProjectRoleCompletedDelegate;
        
        private BeginOperationDelegate onBeginremoveActorsFromProjectRoleDelegate;
        
        private EndOperationDelegate onEndremoveActorsFromProjectRoleDelegate;
        
        private System.Threading.SendOrPostCallback onremoveActorsFromProjectRoleCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddDefaultActorsToProjectRoleDelegate;
        
        private EndOperationDelegate onEndaddDefaultActorsToProjectRoleDelegate;
        
        private System.Threading.SendOrPostCallback onaddDefaultActorsToProjectRoleCompletedDelegate;
        
        private BeginOperationDelegate onBeginremoveDefaultActorsFromProjectRoleDelegate;
        
        private EndOperationDelegate onEndremoveDefaultActorsFromProjectRoleDelegate;
        
        private System.Threading.SendOrPostCallback onremoveDefaultActorsFromProjectRoleCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAssociatedNotificationSchemesDelegate;
        
        private EndOperationDelegate onEndgetAssociatedNotificationSchemesDelegate;
        
        private System.Threading.SendOrPostCallback ongetAssociatedNotificationSchemesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAssociatedPermissionSchemesDelegate;
        
        private EndOperationDelegate onEndgetAssociatedPermissionSchemesDelegate;
        
        private System.Threading.SendOrPostCallback ongetAssociatedPermissionSchemesCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteProjectDelegate;
        
        private EndOperationDelegate onEnddeleteProjectDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteProjectCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProjectByIdDelegate;
        
        private EndOperationDelegate onEndgetProjectByIdDelegate;
        
        private System.Threading.SendOrPostCallback ongetProjectByIdCompletedDelegate;
        
        private BeginOperationDelegate onBegingetVersionsDelegate;
        
        private EndOperationDelegate onEndgetVersionsDelegate;
        
        private System.Threading.SendOrPostCallback ongetVersionsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCommentsDelegate;
        
        private EndOperationDelegate onEndgetCommentsDelegate;
        
        private System.Threading.SendOrPostCallback ongetCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetFavouriteFiltersDelegate;
        
        private EndOperationDelegate onEndgetFavouriteFiltersDelegate;
        
        private System.Threading.SendOrPostCallback ongetFavouriteFiltersCompletedDelegate;
        
        private BeginOperationDelegate onBeginreleaseVersionDelegate;
        
        private EndOperationDelegate onEndreleaseVersionDelegate;
        
        private System.Threading.SendOrPostCallback onreleaseVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginarchiveVersionDelegate;
        
        private EndOperationDelegate onEndarchiveVersionDelegate;
        
        private System.Threading.SendOrPostCallback onarchiveVersionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetFieldsForCreateDelegate;
        
        private EndOperationDelegate onEndgetFieldsForCreateDelegate;
        
        private System.Threading.SendOrPostCallback ongetFieldsForCreateCompletedDelegate;
        
        private BeginOperationDelegate onBegingetFieldsForEditDelegate;
        
        private EndOperationDelegate onEndgetFieldsForEditDelegate;
        
        private System.Threading.SendOrPostCallback ongetFieldsForEditCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSubTaskIssueTypesForProjectDelegate;
        
        private EndOperationDelegate onEndgetSubTaskIssueTypesForProjectDelegate;
        
        private System.Threading.SendOrPostCallback ongetSubTaskIssueTypesForProjectCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCustomFieldsDelegate;
        
        private EndOperationDelegate onEndgetCustomFieldsDelegate;
        
        private System.Threading.SendOrPostCallback ongetCustomFieldsCompletedDelegate;
        
        private BeginOperationDelegate onBeginlogoutDelegate;
        
        private EndOperationDelegate onEndlogoutDelegate;
        
        private System.Threading.SendOrPostCallback onlogoutCompletedDelegate;
        
        private BeginOperationDelegate onBegineditCommentDelegate;
        
        private EndOperationDelegate onEndeditCommentDelegate;
        
        private System.Threading.SendOrPostCallback oneditCommentCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProjectWithSchemesByIdDelegate;
        
        private EndOperationDelegate onEndgetProjectWithSchemesByIdDelegate;
        
        private System.Threading.SendOrPostCallback ongetProjectWithSchemesByIdCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSecurityLevelsDelegate;
        
        private EndOperationDelegate onEndgetSecurityLevelsDelegate;
        
        private System.Threading.SendOrPostCallback ongetSecurityLevelsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProjectAvatarsDelegate;
        
        private EndOperationDelegate onEndgetProjectAvatarsDelegate;
        
        private System.Threading.SendOrPostCallback ongetProjectAvatarsCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetProjectAvatarDelegate;
        
        private EndOperationDelegate onEndsetProjectAvatarDelegate;
        
        private System.Threading.SendOrPostCallback onsetProjectAvatarCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProjectAvatarDelegate;
        
        private EndOperationDelegate onEndgetProjectAvatarDelegate;
        
        private System.Threading.SendOrPostCallback ongetProjectAvatarCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteProjectAvatarDelegate;
        
        private EndOperationDelegate onEnddeleteProjectAvatarDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteProjectAvatarCompletedDelegate;
        
        private BeginOperationDelegate onBegingetNotificationSchemesDelegate;
        
        private EndOperationDelegate onEndgetNotificationSchemesDelegate;
        
        private System.Threading.SendOrPostCallback ongetNotificationSchemesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetPermissionSchemesDelegate;
        
        private EndOperationDelegate onEndgetPermissionSchemesDelegate;
        
        private System.Threading.SendOrPostCallback ongetPermissionSchemesCompletedDelegate;
        
        private BeginOperationDelegate onBegincreatePermissionSchemeDelegate;
        
        private EndOperationDelegate onEndcreatePermissionSchemeDelegate;
        
        private System.Threading.SendOrPostCallback oncreatePermissionSchemeCompletedDelegate;
        
        private BeginOperationDelegate onBegindeletePermissionSchemeDelegate;
        
        private EndOperationDelegate onEnddeletePermissionSchemeDelegate;
        
        private System.Threading.SendOrPostCallback ondeletePermissionSchemeCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddPermissionToDelegate;
        
        private EndOperationDelegate onEndaddPermissionToDelegate;
        
        private System.Threading.SendOrPostCallback onaddPermissionToCompletedDelegate;
        
        private BeginOperationDelegate onBegindeletePermissionFromDelegate;
        
        private EndOperationDelegate onEnddeletePermissionFromDelegate;
        
        private System.Threading.SendOrPostCallback ondeletePermissionFromCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAllPermissionsDelegate;
        
        private EndOperationDelegate onEndgetAllPermissionsDelegate;
        
        private System.Threading.SendOrPostCallback ongetAllPermissionsCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateIssueWithSecurityLevelDelegate;
        
        private EndOperationDelegate onEndcreateIssueWithSecurityLevelDelegate;
        
        private System.Threading.SendOrPostCallback oncreateIssueWithSecurityLevelCompletedDelegate;
        
        private BeginOperationDelegate onBeginhasPermissionToEditCommentDelegate;
        
        private EndOperationDelegate onEndhasPermissionToEditCommentDelegate;
        
        private System.Threading.SendOrPostCallback onhasPermissionToEditCommentCompletedDelegate;
        
        private BeginOperationDelegate onBegingetFieldsForActionDelegate;
        
        private EndOperationDelegate onEndgetFieldsForActionDelegate;
        
        private System.Threading.SendOrPostCallback ongetFieldsForActionCompletedDelegate;
        
        private BeginOperationDelegate onBeginprogressWorkflowActionDelegate;
        
        private EndOperationDelegate onEndprogressWorkflowActionDelegate;
        
        private System.Threading.SendOrPostCallback onprogressWorkflowActionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetIssueByIdDelegate;
        
        private EndOperationDelegate onEndgetIssueByIdDelegate;
        
        private System.Threading.SendOrPostCallback ongetIssueByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddAttachmentsToIssueDelegate;
        
        private EndOperationDelegate onEndaddAttachmentsToIssueDelegate;
        
        private System.Threading.SendOrPostCallback onaddAttachmentsToIssueCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAttachmentsFromIssueDelegate;
        
        private EndOperationDelegate onEndgetAttachmentsFromIssueDelegate;
        
        private System.Threading.SendOrPostCallback ongetAttachmentsFromIssueCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddWorklogWithNewRemainingEstimateDelegate;
        
        private EndOperationDelegate onEndaddWorklogWithNewRemainingEstimateDelegate;
        
        private System.Threading.SendOrPostCallback onaddWorklogWithNewRemainingEstimateCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddWorklogAndAutoAdjustRemainingEstimateDelegate;
        
        private EndOperationDelegate onEndaddWorklogAndAutoAdjustRemainingEstimateDelegate;
        
        private System.Threading.SendOrPostCallback onaddWorklogAndAutoAdjustRemainingEstimateCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddWorklogAndRetainRemainingEstimateDelegate;
        
        private EndOperationDelegate onEndaddWorklogAndRetainRemainingEstimateDelegate;
        
        private System.Threading.SendOrPostCallback onaddWorklogAndRetainRemainingEstimateCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteWorklogAndAutoAdjustRemainingEstimateDelegate;
        
        private EndOperationDelegate onEnddeleteWorklogAndAutoAdjustRemainingEstimateDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteWorklogAndAutoAdjustRemainingEstimateCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteWorklogAndRetainRemainingEstimateDelegate;
        
        private EndOperationDelegate onEnddeleteWorklogAndRetainRemainingEstimateDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteWorklogAndRetainRemainingEstimateCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteWorklogWithNewRemainingEstimateDelegate;
        
        private EndOperationDelegate onEnddeleteWorklogWithNewRemainingEstimateDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteWorklogWithNewRemainingEstimateCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateWorklogAndAutoAdjustRemainingEstimateDelegate;
        
        private EndOperationDelegate onEndupdateWorklogAndAutoAdjustRemainingEstimateDelegate;
        
        private System.Threading.SendOrPostCallback onupdateWorklogAndAutoAdjustRemainingEstimateCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateWorklogAndRetainRemainingEstimateDelegate;
        
        private EndOperationDelegate onEndupdateWorklogAndRetainRemainingEstimateDelegate;
        
        private System.Threading.SendOrPostCallback onupdateWorklogAndRetainRemainingEstimateCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateWorklogWithNewRemainingEstimateDelegate;
        
        private EndOperationDelegate onEndupdateWorklogWithNewRemainingEstimateDelegate;
        
        private System.Threading.SendOrPostCallback onupdateWorklogWithNewRemainingEstimateCompletedDelegate;
        
        private BeginOperationDelegate onBegingetWorklogsDelegate;
        
        private EndOperationDelegate onEndgetWorklogsDelegate;
        
        private System.Threading.SendOrPostCallback ongetWorklogsCompletedDelegate;
        
        private BeginOperationDelegate onBeginhasPermissionToCreateWorklogDelegate;
        
        private EndOperationDelegate onEndhasPermissionToCreateWorklogDelegate;
        
        private System.Threading.SendOrPostCallback onhasPermissionToCreateWorklogCompletedDelegate;
        
        private BeginOperationDelegate onBeginhasPermissionToDeleteWorklogDelegate;
        
        private EndOperationDelegate onEndhasPermissionToDeleteWorklogDelegate;
        
        private System.Threading.SendOrPostCallback onhasPermissionToDeleteWorklogCompletedDelegate;
        
        private BeginOperationDelegate onBeginhasPermissionToUpdateWorklogDelegate;
        
        private EndOperationDelegate onEndhasPermissionToUpdateWorklogDelegate;
        
        private System.Threading.SendOrPostCallback onhasPermissionToUpdateWorklogCompletedDelegate;
        
        private BeginOperationDelegate onBegingetResolutionDateByKeyDelegate;
        
        private EndOperationDelegate onEndgetResolutionDateByKeyDelegate;
        
        private System.Threading.SendOrPostCallback ongetResolutionDateByKeyCompletedDelegate;
        
        private BeginOperationDelegate onBegingetResolutionDateByIdDelegate;
        
        private EndOperationDelegate onEndgetResolutionDateByIdDelegate;
        
        private System.Threading.SendOrPostCallback ongetResolutionDateByIdCompletedDelegate;
        
        private BeginOperationDelegate onBegingetIssueCountForFilterDelegate;
        
        private EndOperationDelegate onEndgetIssueCountForFilterDelegate;
        
        private System.Threading.SendOrPostCallback ongetIssueCountForFilterCompletedDelegate;
        
        private BeginOperationDelegate onBegingetIssuesFromTextSearchDelegate;
        
        private EndOperationDelegate onEndgetIssuesFromTextSearchDelegate;
        
        private System.Threading.SendOrPostCallback ongetIssuesFromTextSearchCompletedDelegate;
        
        private BeginOperationDelegate onBegingetIssuesFromTextSearchWithProjectDelegate;
        
        private EndOperationDelegate onEndgetIssuesFromTextSearchWithProjectDelegate;
        
        private System.Threading.SendOrPostCallback ongetIssuesFromTextSearchWithProjectCompletedDelegate;
        
        private BeginOperationDelegate onBegingetIssuesFromJqlSearchDelegate;
        
        private EndOperationDelegate onEndgetIssuesFromJqlSearchDelegate;
        
        private System.Threading.SendOrPostCallback ongetIssuesFromJqlSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetUserPasswordDelegate;
        
        private EndOperationDelegate onEndsetUserPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onsetUserPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteUserDelegate;
        
        private EndOperationDelegate onEnddeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteGroupDelegate;
        
        private EndOperationDelegate onEnddeleteGroupDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginrefreshCustomFieldsDelegate;
        
        private EndOperationDelegate onEndrefreshCustomFieldsDelegate;
        
        private System.Threading.SendOrPostCallback onrefreshCustomFieldsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetProjectsNoSchemesDelegate;
        
        private EndOperationDelegate onEndgetProjectsNoSchemesDelegate;
        
        private System.Threading.SendOrPostCallback ongetProjectsNoSchemesCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddVersionDelegate;
        
        private EndOperationDelegate onEndaddVersionDelegate;
        
        private System.Threading.SendOrPostCallback onaddVersionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSavedFiltersDelegate;
        
        private EndOperationDelegate onEndgetSavedFiltersDelegate;
        
        private System.Threading.SendOrPostCallback ongetSavedFiltersCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateIssueWithParentDelegate;
        
        private EndOperationDelegate onEndcreateIssueWithParentDelegate;
        
        private System.Threading.SendOrPostCallback oncreateIssueWithParentCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateIssueWithParentWithSecurityLevelDelegate;
        
        private EndOperationDelegate onEndcreateIssueWithParentWithSecurityLevelDelegate;
        
        private System.Threading.SendOrPostCallback oncreateIssueWithParentWithSecurityLevelCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddBase64EncodedAttachmentsToIssueDelegate;
        
        private EndOperationDelegate onEndaddBase64EncodedAttachmentsToIssueDelegate;
        
        private System.Threading.SendOrPostCallback onaddBase64EncodedAttachmentsToIssueCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateProjectFromObjectDelegate;
        
        private EndOperationDelegate onEndcreateProjectFromObjectDelegate;
        
        private System.Threading.SendOrPostCallback oncreateProjectFromObjectCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSecuritySchemesDelegate;
        
        private EndOperationDelegate onEndgetSecuritySchemesDelegate;
        
        private System.Threading.SendOrPostCallback ongetSecuritySchemesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetIssuesFromFilterDelegate;
        
        private EndOperationDelegate onEndgetIssuesFromFilterDelegate;
        
        private System.Threading.SendOrPostCallback ongetIssuesFromFilterCompletedDelegate;
        
        private BeginOperationDelegate onBegingetIssuesFromFilterWithLimitDelegate;
        
        private EndOperationDelegate onEndgetIssuesFromFilterWithLimitDelegate;
        
        private System.Threading.SendOrPostCallback ongetIssuesFromFilterWithLimitCompletedDelegate;
        
        private BeginOperationDelegate onBegingetIssuesFromTextSearchWithLimitDelegate;
        
        private EndOperationDelegate onEndgetIssuesFromTextSearchWithLimitDelegate;
        
        private System.Threading.SendOrPostCallback ongetIssuesFromTextSearchWithLimitCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetNewProjectAvatarDelegate;
        
        private EndOperationDelegate onEndsetNewProjectAvatarDelegate;
        
        private System.Threading.SendOrPostCallback onsetNewProjectAvatarCompletedDelegate;
        
        public JiraSoapServiceClient() {
        }
        
        public JiraSoapServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JiraSoapServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JiraSoapServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JiraSoapServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getCommentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getServerInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> createGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getConfigurationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> loginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> createUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getIssueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addCommentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> createIssueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getComponentsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addUserToGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> removeUserFromGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateIssueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deleteIssueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getAvailableActionsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getSecurityLevelCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> createProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getProjectByKeyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> removeAllRoleActorsByProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getPrioritiesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getResolutionsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getIssueTypesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getSubTaskIssueTypesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getStatusesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getIssueTypesForProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getProjectRolesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getProjectRoleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getProjectRoleActorsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getDefaultRoleActorsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> removeAllRoleActorsByNameAndTypeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deleteProjectRoleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateProjectRoleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> createProjectRoleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> isProjectRoleNameUniqueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addActorsToProjectRoleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> removeActorsFromProjectRoleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addDefaultActorsToProjectRoleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> removeDefaultActorsFromProjectRoleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getAssociatedNotificationSchemesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getAssociatedPermissionSchemesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deleteProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getProjectByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getVersionsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getCommentsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getFavouriteFiltersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> releaseVersionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> archiveVersionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getFieldsForCreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getFieldsForEditCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getSubTaskIssueTypesForProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getCustomFieldsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> logoutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> editCommentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getProjectWithSchemesByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getSecurityLevelsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getProjectAvatarsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> setProjectAvatarCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getProjectAvatarCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deleteProjectAvatarCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getNotificationSchemesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getPermissionSchemesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> createPermissionSchemeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deletePermissionSchemeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addPermissionToCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deletePermissionFromCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getAllPermissionsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> createIssueWithSecurityLevelCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> hasPermissionToEditCommentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getFieldsForActionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> progressWorkflowActionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getIssueByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addAttachmentsToIssueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getAttachmentsFromIssueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addWorklogWithNewRemainingEstimateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addWorklogAndAutoAdjustRemainingEstimateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addWorklogAndRetainRemainingEstimateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deleteWorklogAndAutoAdjustRemainingEstimateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deleteWorklogAndRetainRemainingEstimateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deleteWorklogWithNewRemainingEstimateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateWorklogAndAutoAdjustRemainingEstimateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateWorklogAndRetainRemainingEstimateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> updateWorklogWithNewRemainingEstimateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getWorklogsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> hasPermissionToCreateWorklogCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> hasPermissionToDeleteWorklogCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> hasPermissionToUpdateWorklogCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getResolutionDateByKeyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getResolutionDateByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getIssueCountForFilterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getIssuesFromTextSearchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getIssuesFromTextSearchWithProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getIssuesFromJqlSearchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> setUserPasswordCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deleteUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deleteGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> refreshCustomFieldsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getProjectsNoSchemesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addVersionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getSavedFiltersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> createIssueWithParentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> createIssueWithParentWithSecurityLevelCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addBase64EncodedAttachmentsToIssueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> createProjectFromObjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getSecuritySchemesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getIssuesFromFilterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getIssuesFromFilterWithLimitCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> getIssuesFromTextSearchWithLimitCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> setNewProjectAvatarCompleted;
        
        public void getComment() {
            base.Channel.getComment();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetComment(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetComment(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetComment(System.IAsyncResult result) {
            base.Channel.EndgetComment(result);
        }
        
        private System.IAsyncResult OnBegingetComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetComment(callback, asyncState);
        }
        
        private object[] OnEndgetComment(System.IAsyncResult result) {
            this.EndgetComment(result);
            return null;
        }
        
        private void OngetCommentCompleted(object state) {
            if ((this.getCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCommentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCommentAsync() {
            this.getCommentAsync(null);
        }
        
        public void getCommentAsync(object userState) {
            if ((this.onBegingetCommentDelegate == null)) {
                this.onBegingetCommentDelegate = new BeginOperationDelegate(this.OnBegingetComment);
            }
            if ((this.onEndgetCommentDelegate == null)) {
                this.onEndgetCommentDelegate = new EndOperationDelegate(this.OnEndgetComment);
            }
            if ((this.ongetCommentCompletedDelegate == null)) {
                this.ongetCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCommentCompleted);
            }
            base.InvokeAsync(this.onBegingetCommentDelegate, null, this.onEndgetCommentDelegate, this.ongetCommentCompletedDelegate, userState);
        }
        
        public void getServerInfo() {
            base.Channel.getServerInfo();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetServerInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetServerInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetServerInfo(System.IAsyncResult result) {
            base.Channel.EndgetServerInfo(result);
        }
        
        private System.IAsyncResult OnBegingetServerInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetServerInfo(callback, asyncState);
        }
        
        private object[] OnEndgetServerInfo(System.IAsyncResult result) {
            this.EndgetServerInfo(result);
            return null;
        }
        
        private void OngetServerInfoCompleted(object state) {
            if ((this.getServerInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getServerInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getServerInfoAsync() {
            this.getServerInfoAsync(null);
        }
        
        public void getServerInfoAsync(object userState) {
            if ((this.onBegingetServerInfoDelegate == null)) {
                this.onBegingetServerInfoDelegate = new BeginOperationDelegate(this.OnBegingetServerInfo);
            }
            if ((this.onEndgetServerInfoDelegate == null)) {
                this.onEndgetServerInfoDelegate = new EndOperationDelegate(this.OnEndgetServerInfo);
            }
            if ((this.ongetServerInfoCompletedDelegate == null)) {
                this.ongetServerInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetServerInfoCompleted);
            }
            base.InvokeAsync(this.onBegingetServerInfoDelegate, null, this.onEndgetServerInfoDelegate, this.ongetServerInfoCompletedDelegate, userState);
        }
        
        public void getGroup() {
            base.Channel.getGroup();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetGroup(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetGroup(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetGroup(System.IAsyncResult result) {
            base.Channel.EndgetGroup(result);
        }
        
        private System.IAsyncResult OnBegingetGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetGroup(callback, asyncState);
        }
        
        private object[] OnEndgetGroup(System.IAsyncResult result) {
            this.EndgetGroup(result);
            return null;
        }
        
        private void OngetGroupCompleted(object state) {
            if ((this.getGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getGroupAsync() {
            this.getGroupAsync(null);
        }
        
        public void getGroupAsync(object userState) {
            if ((this.onBegingetGroupDelegate == null)) {
                this.onBegingetGroupDelegate = new BeginOperationDelegate(this.OnBegingetGroup);
            }
            if ((this.onEndgetGroupDelegate == null)) {
                this.onEndgetGroupDelegate = new EndOperationDelegate(this.OnEndgetGroup);
            }
            if ((this.ongetGroupCompletedDelegate == null)) {
                this.ongetGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetGroupCompleted);
            }
            base.InvokeAsync(this.onBegingetGroupDelegate, null, this.onEndgetGroupDelegate, this.ongetGroupCompletedDelegate, userState);
        }
        
        public void createGroup() {
            base.Channel.createGroup();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincreateGroup(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateGroup(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndcreateGroup(System.IAsyncResult result) {
            base.Channel.EndcreateGroup(result);
        }
        
        private System.IAsyncResult OnBegincreateGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegincreateGroup(callback, asyncState);
        }
        
        private object[] OnEndcreateGroup(System.IAsyncResult result) {
            this.EndcreateGroup(result);
            return null;
        }
        
        private void OncreateGroupCompleted(object state) {
            if ((this.createGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createGroupAsync() {
            this.createGroupAsync(null);
        }
        
        public void createGroupAsync(object userState) {
            if ((this.onBegincreateGroupDelegate == null)) {
                this.onBegincreateGroupDelegate = new BeginOperationDelegate(this.OnBegincreateGroup);
            }
            if ((this.onEndcreateGroupDelegate == null)) {
                this.onEndcreateGroupDelegate = new EndOperationDelegate(this.OnEndcreateGroup);
            }
            if ((this.oncreateGroupCompletedDelegate == null)) {
                this.oncreateGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateGroupCompleted);
            }
            base.InvokeAsync(this.onBegincreateGroupDelegate, null, this.onEndcreateGroupDelegate, this.oncreateGroupCompletedDelegate, userState);
        }
        
        public void getConfiguration() {
            base.Channel.getConfiguration();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetConfiguration(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetConfiguration(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetConfiguration(System.IAsyncResult result) {
            base.Channel.EndgetConfiguration(result);
        }
        
        private System.IAsyncResult OnBegingetConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetConfiguration(callback, asyncState);
        }
        
        private object[] OnEndgetConfiguration(System.IAsyncResult result) {
            this.EndgetConfiguration(result);
            return null;
        }
        
        private void OngetConfigurationCompleted(object state) {
            if ((this.getConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getConfigurationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getConfigurationAsync() {
            this.getConfigurationAsync(null);
        }
        
        public void getConfigurationAsync(object userState) {
            if ((this.onBegingetConfigurationDelegate == null)) {
                this.onBegingetConfigurationDelegate = new BeginOperationDelegate(this.OnBegingetConfiguration);
            }
            if ((this.onEndgetConfigurationDelegate == null)) {
                this.onEndgetConfigurationDelegate = new EndOperationDelegate(this.OnEndgetConfiguration);
            }
            if ((this.ongetConfigurationCompletedDelegate == null)) {
                this.ongetConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetConfigurationCompleted);
            }
            base.InvokeAsync(this.onBegingetConfigurationDelegate, null, this.onEndgetConfigurationDelegate, this.ongetConfigurationCompletedDelegate, userState);
        }
        
        public void login() {
            base.Channel.login();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Beginlogin(System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginlogin(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void Endlogin(System.IAsyncResult result) {
            base.Channel.Endlogin(result);
        }
        
        private System.IAsyncResult OnBeginlogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.Beginlogin(callback, asyncState);
        }
        
        private object[] OnEndlogin(System.IAsyncResult result) {
            this.Endlogin(result);
            return null;
        }
        
        private void OnloginCompleted(object state) {
            if ((this.loginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.loginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void loginAsync() {
            this.loginAsync(null);
        }
        
        public void loginAsync(object userState) {
            if ((this.onBeginloginDelegate == null)) {
                this.onBeginloginDelegate = new BeginOperationDelegate(this.OnBeginlogin);
            }
            if ((this.onEndloginDelegate == null)) {
                this.onEndloginDelegate = new EndOperationDelegate(this.OnEndlogin);
            }
            if ((this.onloginCompletedDelegate == null)) {
                this.onloginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnloginCompleted);
            }
            base.InvokeAsync(this.onBeginloginDelegate, null, this.onEndloginDelegate, this.onloginCompletedDelegate, userState);
        }
        
        public void createUser() {
            base.Channel.createUser();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincreateUser(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateUser(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndcreateUser(System.IAsyncResult result) {
            base.Channel.EndcreateUser(result);
        }
        
        private System.IAsyncResult OnBegincreateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegincreateUser(callback, asyncState);
        }
        
        private object[] OnEndcreateUser(System.IAsyncResult result) {
            this.EndcreateUser(result);
            return null;
        }
        
        private void OncreateUserCompleted(object state) {
            if ((this.createUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createUserAsync() {
            this.createUserAsync(null);
        }
        
        public void createUserAsync(object userState) {
            if ((this.onBegincreateUserDelegate == null)) {
                this.onBegincreateUserDelegate = new BeginOperationDelegate(this.OnBegincreateUser);
            }
            if ((this.onEndcreateUserDelegate == null)) {
                this.onEndcreateUserDelegate = new EndOperationDelegate(this.OnEndcreateUser);
            }
            if ((this.oncreateUserCompletedDelegate == null)) {
                this.oncreateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateUserCompleted);
            }
            base.InvokeAsync(this.onBegincreateUserDelegate, null, this.onEndcreateUserDelegate, this.oncreateUserCompletedDelegate, userState);
        }
        
        public void getUser() {
            base.Channel.getUser();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetUser(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetUser(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetUser(System.IAsyncResult result) {
            base.Channel.EndgetUser(result);
        }
        
        private System.IAsyncResult OnBegingetUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetUser(callback, asyncState);
        }
        
        private object[] OnEndgetUser(System.IAsyncResult result) {
            this.EndgetUser(result);
            return null;
        }
        
        private void OngetUserCompleted(object state) {
            if ((this.getUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getUserAsync() {
            this.getUserAsync(null);
        }
        
        public void getUserAsync(object userState) {
            if ((this.onBegingetUserDelegate == null)) {
                this.onBegingetUserDelegate = new BeginOperationDelegate(this.OnBegingetUser);
            }
            if ((this.onEndgetUserDelegate == null)) {
                this.onEndgetUserDelegate = new EndOperationDelegate(this.OnEndgetUser);
            }
            if ((this.ongetUserCompletedDelegate == null)) {
                this.ongetUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetUserCompleted);
            }
            base.InvokeAsync(this.onBegingetUserDelegate, null, this.onEndgetUserDelegate, this.ongetUserCompletedDelegate, userState);
        }
        
        public void getIssue() {
            base.Channel.getIssue();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetIssue(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetIssue(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetIssue(System.IAsyncResult result) {
            base.Channel.EndgetIssue(result);
        }
        
        private System.IAsyncResult OnBegingetIssue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetIssue(callback, asyncState);
        }
        
        private object[] OnEndgetIssue(System.IAsyncResult result) {
            this.EndgetIssue(result);
            return null;
        }
        
        private void OngetIssueCompleted(object state) {
            if ((this.getIssueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getIssueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getIssueAsync() {
            this.getIssueAsync(null);
        }
        
        public void getIssueAsync(object userState) {
            if ((this.onBegingetIssueDelegate == null)) {
                this.onBegingetIssueDelegate = new BeginOperationDelegate(this.OnBegingetIssue);
            }
            if ((this.onEndgetIssueDelegate == null)) {
                this.onEndgetIssueDelegate = new EndOperationDelegate(this.OnEndgetIssue);
            }
            if ((this.ongetIssueCompletedDelegate == null)) {
                this.ongetIssueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetIssueCompleted);
            }
            base.InvokeAsync(this.onBegingetIssueDelegate, null, this.onEndgetIssueDelegate, this.ongetIssueCompletedDelegate, userState);
        }
        
        public void addComment() {
            base.Channel.addComment();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddComment(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddComment(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndaddComment(System.IAsyncResult result) {
            base.Channel.EndaddComment(result);
        }
        
        private System.IAsyncResult OnBeginaddComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginaddComment(callback, asyncState);
        }
        
        private object[] OnEndaddComment(System.IAsyncResult result) {
            this.EndaddComment(result);
            return null;
        }
        
        private void OnaddCommentCompleted(object state) {
            if ((this.addCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addCommentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addCommentAsync() {
            this.addCommentAsync(null);
        }
        
        public void addCommentAsync(object userState) {
            if ((this.onBeginaddCommentDelegate == null)) {
                this.onBeginaddCommentDelegate = new BeginOperationDelegate(this.OnBeginaddComment);
            }
            if ((this.onEndaddCommentDelegate == null)) {
                this.onEndaddCommentDelegate = new EndOperationDelegate(this.OnEndaddComment);
            }
            if ((this.onaddCommentCompletedDelegate == null)) {
                this.onaddCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddCommentCompleted);
            }
            base.InvokeAsync(this.onBeginaddCommentDelegate, null, this.onEndaddCommentDelegate, this.onaddCommentCompletedDelegate, userState);
        }
        
        public void createIssue() {
            base.Channel.createIssue();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincreateIssue(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateIssue(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndcreateIssue(System.IAsyncResult result) {
            base.Channel.EndcreateIssue(result);
        }
        
        private System.IAsyncResult OnBegincreateIssue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegincreateIssue(callback, asyncState);
        }
        
        private object[] OnEndcreateIssue(System.IAsyncResult result) {
            this.EndcreateIssue(result);
            return null;
        }
        
        private void OncreateIssueCompleted(object state) {
            if ((this.createIssueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createIssueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createIssueAsync() {
            this.createIssueAsync(null);
        }
        
        public void createIssueAsync(object userState) {
            if ((this.onBegincreateIssueDelegate == null)) {
                this.onBegincreateIssueDelegate = new BeginOperationDelegate(this.OnBegincreateIssue);
            }
            if ((this.onEndcreateIssueDelegate == null)) {
                this.onEndcreateIssueDelegate = new EndOperationDelegate(this.OnEndcreateIssue);
            }
            if ((this.oncreateIssueCompletedDelegate == null)) {
                this.oncreateIssueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateIssueCompleted);
            }
            base.InvokeAsync(this.onBegincreateIssueDelegate, null, this.onEndcreateIssueDelegate, this.oncreateIssueCompletedDelegate, userState);
        }
        
        public void getComponents() {
            base.Channel.getComponents();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetComponents(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetComponents(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetComponents(System.IAsyncResult result) {
            base.Channel.EndgetComponents(result);
        }
        
        private System.IAsyncResult OnBegingetComponents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetComponents(callback, asyncState);
        }
        
        private object[] OnEndgetComponents(System.IAsyncResult result) {
            this.EndgetComponents(result);
            return null;
        }
        
        private void OngetComponentsCompleted(object state) {
            if ((this.getComponentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getComponentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getComponentsAsync() {
            this.getComponentsAsync(null);
        }
        
        public void getComponentsAsync(object userState) {
            if ((this.onBegingetComponentsDelegate == null)) {
                this.onBegingetComponentsDelegate = new BeginOperationDelegate(this.OnBegingetComponents);
            }
            if ((this.onEndgetComponentsDelegate == null)) {
                this.onEndgetComponentsDelegate = new EndOperationDelegate(this.OnEndgetComponents);
            }
            if ((this.ongetComponentsCompletedDelegate == null)) {
                this.ongetComponentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetComponentsCompleted);
            }
            base.InvokeAsync(this.onBegingetComponentsDelegate, null, this.onEndgetComponentsDelegate, this.ongetComponentsCompletedDelegate, userState);
        }
        
        public void updateUser() {
            base.Channel.updateUser();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateUser(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateUser(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateUser(System.IAsyncResult result) {
            base.Channel.EndupdateUser(result);
        }
        
        private System.IAsyncResult OnBeginupdateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginupdateUser(callback, asyncState);
        }
        
        private object[] OnEndupdateUser(System.IAsyncResult result) {
            this.EndupdateUser(result);
            return null;
        }
        
        private void OnupdateUserCompleted(object state) {
            if ((this.updateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateUserAsync() {
            this.updateUserAsync(null);
        }
        
        public void updateUserAsync(object userState) {
            if ((this.onBeginupdateUserDelegate == null)) {
                this.onBeginupdateUserDelegate = new BeginOperationDelegate(this.OnBeginupdateUser);
            }
            if ((this.onEndupdateUserDelegate == null)) {
                this.onEndupdateUserDelegate = new EndOperationDelegate(this.OnEndupdateUser);
            }
            if ((this.onupdateUserCompletedDelegate == null)) {
                this.onupdateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateUserCompleted);
            }
            base.InvokeAsync(this.onBeginupdateUserDelegate, null, this.onEndupdateUserDelegate, this.onupdateUserCompletedDelegate, userState);
        }
        
        public void updateGroup() {
            base.Channel.updateGroup();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateGroup(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateGroup(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateGroup(System.IAsyncResult result) {
            base.Channel.EndupdateGroup(result);
        }
        
        private System.IAsyncResult OnBeginupdateGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginupdateGroup(callback, asyncState);
        }
        
        private object[] OnEndupdateGroup(System.IAsyncResult result) {
            this.EndupdateGroup(result);
            return null;
        }
        
        private void OnupdateGroupCompleted(object state) {
            if ((this.updateGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateGroupAsync() {
            this.updateGroupAsync(null);
        }
        
        public void updateGroupAsync(object userState) {
            if ((this.onBeginupdateGroupDelegate == null)) {
                this.onBeginupdateGroupDelegate = new BeginOperationDelegate(this.OnBeginupdateGroup);
            }
            if ((this.onEndupdateGroupDelegate == null)) {
                this.onEndupdateGroupDelegate = new EndOperationDelegate(this.OnEndupdateGroup);
            }
            if ((this.onupdateGroupCompletedDelegate == null)) {
                this.onupdateGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateGroupCompleted);
            }
            base.InvokeAsync(this.onBeginupdateGroupDelegate, null, this.onEndupdateGroupDelegate, this.onupdateGroupCompletedDelegate, userState);
        }
        
        public void addUserToGroup() {
            base.Channel.addUserToGroup();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddUserToGroup(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddUserToGroup(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndaddUserToGroup(System.IAsyncResult result) {
            base.Channel.EndaddUserToGroup(result);
        }
        
        private System.IAsyncResult OnBeginaddUserToGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginaddUserToGroup(callback, asyncState);
        }
        
        private object[] OnEndaddUserToGroup(System.IAsyncResult result) {
            this.EndaddUserToGroup(result);
            return null;
        }
        
        private void OnaddUserToGroupCompleted(object state) {
            if ((this.addUserToGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addUserToGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addUserToGroupAsync() {
            this.addUserToGroupAsync(null);
        }
        
        public void addUserToGroupAsync(object userState) {
            if ((this.onBeginaddUserToGroupDelegate == null)) {
                this.onBeginaddUserToGroupDelegate = new BeginOperationDelegate(this.OnBeginaddUserToGroup);
            }
            if ((this.onEndaddUserToGroupDelegate == null)) {
                this.onEndaddUserToGroupDelegate = new EndOperationDelegate(this.OnEndaddUserToGroup);
            }
            if ((this.onaddUserToGroupCompletedDelegate == null)) {
                this.onaddUserToGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddUserToGroupCompleted);
            }
            base.InvokeAsync(this.onBeginaddUserToGroupDelegate, null, this.onEndaddUserToGroupDelegate, this.onaddUserToGroupCompletedDelegate, userState);
        }
        
        public void removeUserFromGroup() {
            base.Channel.removeUserFromGroup();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginremoveUserFromGroup(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremoveUserFromGroup(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndremoveUserFromGroup(System.IAsyncResult result) {
            base.Channel.EndremoveUserFromGroup(result);
        }
        
        private System.IAsyncResult OnBeginremoveUserFromGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginremoveUserFromGroup(callback, asyncState);
        }
        
        private object[] OnEndremoveUserFromGroup(System.IAsyncResult result) {
            this.EndremoveUserFromGroup(result);
            return null;
        }
        
        private void OnremoveUserFromGroupCompleted(object state) {
            if ((this.removeUserFromGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removeUserFromGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removeUserFromGroupAsync() {
            this.removeUserFromGroupAsync(null);
        }
        
        public void removeUserFromGroupAsync(object userState) {
            if ((this.onBeginremoveUserFromGroupDelegate == null)) {
                this.onBeginremoveUserFromGroupDelegate = new BeginOperationDelegate(this.OnBeginremoveUserFromGroup);
            }
            if ((this.onEndremoveUserFromGroupDelegate == null)) {
                this.onEndremoveUserFromGroupDelegate = new EndOperationDelegate(this.OnEndremoveUserFromGroup);
            }
            if ((this.onremoveUserFromGroupCompletedDelegate == null)) {
                this.onremoveUserFromGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremoveUserFromGroupCompleted);
            }
            base.InvokeAsync(this.onBeginremoveUserFromGroupDelegate, null, this.onEndremoveUserFromGroupDelegate, this.onremoveUserFromGroupCompletedDelegate, userState);
        }
        
        public void updateIssue() {
            base.Channel.updateIssue();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateIssue(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateIssue(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateIssue(System.IAsyncResult result) {
            base.Channel.EndupdateIssue(result);
        }
        
        private System.IAsyncResult OnBeginupdateIssue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginupdateIssue(callback, asyncState);
        }
        
        private object[] OnEndupdateIssue(System.IAsyncResult result) {
            this.EndupdateIssue(result);
            return null;
        }
        
        private void OnupdateIssueCompleted(object state) {
            if ((this.updateIssueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateIssueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateIssueAsync() {
            this.updateIssueAsync(null);
        }
        
        public void updateIssueAsync(object userState) {
            if ((this.onBeginupdateIssueDelegate == null)) {
                this.onBeginupdateIssueDelegate = new BeginOperationDelegate(this.OnBeginupdateIssue);
            }
            if ((this.onEndupdateIssueDelegate == null)) {
                this.onEndupdateIssueDelegate = new EndOperationDelegate(this.OnEndupdateIssue);
            }
            if ((this.onupdateIssueCompletedDelegate == null)) {
                this.onupdateIssueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateIssueCompleted);
            }
            base.InvokeAsync(this.onBeginupdateIssueDelegate, null, this.onEndupdateIssueDelegate, this.onupdateIssueCompletedDelegate, userState);
        }
        
        public void deleteIssue() {
            base.Channel.deleteIssue();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeleteIssue(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteIssue(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnddeleteIssue(System.IAsyncResult result) {
            base.Channel.EnddeleteIssue(result);
        }
        
        private System.IAsyncResult OnBegindeleteIssue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegindeleteIssue(callback, asyncState);
        }
        
        private object[] OnEnddeleteIssue(System.IAsyncResult result) {
            this.EnddeleteIssue(result);
            return null;
        }
        
        private void OndeleteIssueCompleted(object state) {
            if ((this.deleteIssueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteIssueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteIssueAsync() {
            this.deleteIssueAsync(null);
        }
        
        public void deleteIssueAsync(object userState) {
            if ((this.onBegindeleteIssueDelegate == null)) {
                this.onBegindeleteIssueDelegate = new BeginOperationDelegate(this.OnBegindeleteIssue);
            }
            if ((this.onEnddeleteIssueDelegate == null)) {
                this.onEnddeleteIssueDelegate = new EndOperationDelegate(this.OnEnddeleteIssue);
            }
            if ((this.ondeleteIssueCompletedDelegate == null)) {
                this.ondeleteIssueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteIssueCompleted);
            }
            base.InvokeAsync(this.onBegindeleteIssueDelegate, null, this.onEnddeleteIssueDelegate, this.ondeleteIssueCompletedDelegate, userState);
        }
        
        public void getAvailableActions() {
            base.Channel.getAvailableActions();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAvailableActions(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAvailableActions(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetAvailableActions(System.IAsyncResult result) {
            base.Channel.EndgetAvailableActions(result);
        }
        
        private System.IAsyncResult OnBegingetAvailableActions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetAvailableActions(callback, asyncState);
        }
        
        private object[] OnEndgetAvailableActions(System.IAsyncResult result) {
            this.EndgetAvailableActions(result);
            return null;
        }
        
        private void OngetAvailableActionsCompleted(object state) {
            if ((this.getAvailableActionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAvailableActionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAvailableActionsAsync() {
            this.getAvailableActionsAsync(null);
        }
        
        public void getAvailableActionsAsync(object userState) {
            if ((this.onBegingetAvailableActionsDelegate == null)) {
                this.onBegingetAvailableActionsDelegate = new BeginOperationDelegate(this.OnBegingetAvailableActions);
            }
            if ((this.onEndgetAvailableActionsDelegate == null)) {
                this.onEndgetAvailableActionsDelegate = new EndOperationDelegate(this.OnEndgetAvailableActions);
            }
            if ((this.ongetAvailableActionsCompletedDelegate == null)) {
                this.ongetAvailableActionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAvailableActionsCompleted);
            }
            base.InvokeAsync(this.onBegingetAvailableActionsDelegate, null, this.onEndgetAvailableActionsDelegate, this.ongetAvailableActionsCompletedDelegate, userState);
        }
        
        public void getSecurityLevel() {
            base.Channel.getSecurityLevel();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSecurityLevel(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSecurityLevel(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetSecurityLevel(System.IAsyncResult result) {
            base.Channel.EndgetSecurityLevel(result);
        }
        
        private System.IAsyncResult OnBegingetSecurityLevel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetSecurityLevel(callback, asyncState);
        }
        
        private object[] OnEndgetSecurityLevel(System.IAsyncResult result) {
            this.EndgetSecurityLevel(result);
            return null;
        }
        
        private void OngetSecurityLevelCompleted(object state) {
            if ((this.getSecurityLevelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSecurityLevelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSecurityLevelAsync() {
            this.getSecurityLevelAsync(null);
        }
        
        public void getSecurityLevelAsync(object userState) {
            if ((this.onBegingetSecurityLevelDelegate == null)) {
                this.onBegingetSecurityLevelDelegate = new BeginOperationDelegate(this.OnBegingetSecurityLevel);
            }
            if ((this.onEndgetSecurityLevelDelegate == null)) {
                this.onEndgetSecurityLevelDelegate = new EndOperationDelegate(this.OnEndgetSecurityLevel);
            }
            if ((this.ongetSecurityLevelCompletedDelegate == null)) {
                this.ongetSecurityLevelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSecurityLevelCompleted);
            }
            base.InvokeAsync(this.onBegingetSecurityLevelDelegate, null, this.onEndgetSecurityLevelDelegate, this.ongetSecurityLevelCompletedDelegate, userState);
        }
        
        public void createProject() {
            base.Channel.createProject();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincreateProject(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateProject(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndcreateProject(System.IAsyncResult result) {
            base.Channel.EndcreateProject(result);
        }
        
        private System.IAsyncResult OnBegincreateProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegincreateProject(callback, asyncState);
        }
        
        private object[] OnEndcreateProject(System.IAsyncResult result) {
            this.EndcreateProject(result);
            return null;
        }
        
        private void OncreateProjectCompleted(object state) {
            if ((this.createProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createProjectAsync() {
            this.createProjectAsync(null);
        }
        
        public void createProjectAsync(object userState) {
            if ((this.onBegincreateProjectDelegate == null)) {
                this.onBegincreateProjectDelegate = new BeginOperationDelegate(this.OnBegincreateProject);
            }
            if ((this.onEndcreateProjectDelegate == null)) {
                this.onEndcreateProjectDelegate = new EndOperationDelegate(this.OnEndcreateProject);
            }
            if ((this.oncreateProjectCompletedDelegate == null)) {
                this.oncreateProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateProjectCompleted);
            }
            base.InvokeAsync(this.onBegincreateProjectDelegate, null, this.onEndcreateProjectDelegate, this.oncreateProjectCompletedDelegate, userState);
        }
        
        public void updateProject() {
            base.Channel.updateProject();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateProject(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateProject(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateProject(System.IAsyncResult result) {
            base.Channel.EndupdateProject(result);
        }
        
        private System.IAsyncResult OnBeginupdateProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginupdateProject(callback, asyncState);
        }
        
        private object[] OnEndupdateProject(System.IAsyncResult result) {
            this.EndupdateProject(result);
            return null;
        }
        
        private void OnupdateProjectCompleted(object state) {
            if ((this.updateProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateProjectAsync() {
            this.updateProjectAsync(null);
        }
        
        public void updateProjectAsync(object userState) {
            if ((this.onBeginupdateProjectDelegate == null)) {
                this.onBeginupdateProjectDelegate = new BeginOperationDelegate(this.OnBeginupdateProject);
            }
            if ((this.onEndupdateProjectDelegate == null)) {
                this.onEndupdateProjectDelegate = new EndOperationDelegate(this.OnEndupdateProject);
            }
            if ((this.onupdateProjectCompletedDelegate == null)) {
                this.onupdateProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateProjectCompleted);
            }
            base.InvokeAsync(this.onBeginupdateProjectDelegate, null, this.onEndupdateProjectDelegate, this.onupdateProjectCompletedDelegate, userState);
        }
        
        public void getProjectByKey() {
            base.Channel.getProjectByKey();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProjectByKey(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProjectByKey(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetProjectByKey(System.IAsyncResult result) {
            base.Channel.EndgetProjectByKey(result);
        }
        
        private System.IAsyncResult OnBegingetProjectByKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetProjectByKey(callback, asyncState);
        }
        
        private object[] OnEndgetProjectByKey(System.IAsyncResult result) {
            this.EndgetProjectByKey(result);
            return null;
        }
        
        private void OngetProjectByKeyCompleted(object state) {
            if ((this.getProjectByKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProjectByKeyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProjectByKeyAsync() {
            this.getProjectByKeyAsync(null);
        }
        
        public void getProjectByKeyAsync(object userState) {
            if ((this.onBegingetProjectByKeyDelegate == null)) {
                this.onBegingetProjectByKeyDelegate = new BeginOperationDelegate(this.OnBegingetProjectByKey);
            }
            if ((this.onEndgetProjectByKeyDelegate == null)) {
                this.onEndgetProjectByKeyDelegate = new EndOperationDelegate(this.OnEndgetProjectByKey);
            }
            if ((this.ongetProjectByKeyCompletedDelegate == null)) {
                this.ongetProjectByKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProjectByKeyCompleted);
            }
            base.InvokeAsync(this.onBegingetProjectByKeyDelegate, null, this.onEndgetProjectByKeyDelegate, this.ongetProjectByKeyCompletedDelegate, userState);
        }
        
        public void removeAllRoleActorsByProject() {
            base.Channel.removeAllRoleActorsByProject();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginremoveAllRoleActorsByProject(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremoveAllRoleActorsByProject(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndremoveAllRoleActorsByProject(System.IAsyncResult result) {
            base.Channel.EndremoveAllRoleActorsByProject(result);
        }
        
        private System.IAsyncResult OnBeginremoveAllRoleActorsByProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginremoveAllRoleActorsByProject(callback, asyncState);
        }
        
        private object[] OnEndremoveAllRoleActorsByProject(System.IAsyncResult result) {
            this.EndremoveAllRoleActorsByProject(result);
            return null;
        }
        
        private void OnremoveAllRoleActorsByProjectCompleted(object state) {
            if ((this.removeAllRoleActorsByProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removeAllRoleActorsByProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removeAllRoleActorsByProjectAsync() {
            this.removeAllRoleActorsByProjectAsync(null);
        }
        
        public void removeAllRoleActorsByProjectAsync(object userState) {
            if ((this.onBeginremoveAllRoleActorsByProjectDelegate == null)) {
                this.onBeginremoveAllRoleActorsByProjectDelegate = new BeginOperationDelegate(this.OnBeginremoveAllRoleActorsByProject);
            }
            if ((this.onEndremoveAllRoleActorsByProjectDelegate == null)) {
                this.onEndremoveAllRoleActorsByProjectDelegate = new EndOperationDelegate(this.OnEndremoveAllRoleActorsByProject);
            }
            if ((this.onremoveAllRoleActorsByProjectCompletedDelegate == null)) {
                this.onremoveAllRoleActorsByProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremoveAllRoleActorsByProjectCompleted);
            }
            base.InvokeAsync(this.onBeginremoveAllRoleActorsByProjectDelegate, null, this.onEndremoveAllRoleActorsByProjectDelegate, this.onremoveAllRoleActorsByProjectCompletedDelegate, userState);
        }
        
        public void getPriorities() {
            base.Channel.getPriorities();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetPriorities(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetPriorities(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetPriorities(System.IAsyncResult result) {
            base.Channel.EndgetPriorities(result);
        }
        
        private System.IAsyncResult OnBegingetPriorities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetPriorities(callback, asyncState);
        }
        
        private object[] OnEndgetPriorities(System.IAsyncResult result) {
            this.EndgetPriorities(result);
            return null;
        }
        
        private void OngetPrioritiesCompleted(object state) {
            if ((this.getPrioritiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPrioritiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPrioritiesAsync() {
            this.getPrioritiesAsync(null);
        }
        
        public void getPrioritiesAsync(object userState) {
            if ((this.onBegingetPrioritiesDelegate == null)) {
                this.onBegingetPrioritiesDelegate = new BeginOperationDelegate(this.OnBegingetPriorities);
            }
            if ((this.onEndgetPrioritiesDelegate == null)) {
                this.onEndgetPrioritiesDelegate = new EndOperationDelegate(this.OnEndgetPriorities);
            }
            if ((this.ongetPrioritiesCompletedDelegate == null)) {
                this.ongetPrioritiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPrioritiesCompleted);
            }
            base.InvokeAsync(this.onBegingetPrioritiesDelegate, null, this.onEndgetPrioritiesDelegate, this.ongetPrioritiesCompletedDelegate, userState);
        }
        
        public void getResolutions() {
            base.Channel.getResolutions();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetResolutions(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetResolutions(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetResolutions(System.IAsyncResult result) {
            base.Channel.EndgetResolutions(result);
        }
        
        private System.IAsyncResult OnBegingetResolutions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetResolutions(callback, asyncState);
        }
        
        private object[] OnEndgetResolutions(System.IAsyncResult result) {
            this.EndgetResolutions(result);
            return null;
        }
        
        private void OngetResolutionsCompleted(object state) {
            if ((this.getResolutionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getResolutionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getResolutionsAsync() {
            this.getResolutionsAsync(null);
        }
        
        public void getResolutionsAsync(object userState) {
            if ((this.onBegingetResolutionsDelegate == null)) {
                this.onBegingetResolutionsDelegate = new BeginOperationDelegate(this.OnBegingetResolutions);
            }
            if ((this.onEndgetResolutionsDelegate == null)) {
                this.onEndgetResolutionsDelegate = new EndOperationDelegate(this.OnEndgetResolutions);
            }
            if ((this.ongetResolutionsCompletedDelegate == null)) {
                this.ongetResolutionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetResolutionsCompleted);
            }
            base.InvokeAsync(this.onBegingetResolutionsDelegate, null, this.onEndgetResolutionsDelegate, this.ongetResolutionsCompletedDelegate, userState);
        }
        
        public void getIssueTypes() {
            base.Channel.getIssueTypes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetIssueTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetIssueTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetIssueTypes(System.IAsyncResult result) {
            base.Channel.EndgetIssueTypes(result);
        }
        
        private System.IAsyncResult OnBegingetIssueTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetIssueTypes(callback, asyncState);
        }
        
        private object[] OnEndgetIssueTypes(System.IAsyncResult result) {
            this.EndgetIssueTypes(result);
            return null;
        }
        
        private void OngetIssueTypesCompleted(object state) {
            if ((this.getIssueTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getIssueTypesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getIssueTypesAsync() {
            this.getIssueTypesAsync(null);
        }
        
        public void getIssueTypesAsync(object userState) {
            if ((this.onBegingetIssueTypesDelegate == null)) {
                this.onBegingetIssueTypesDelegate = new BeginOperationDelegate(this.OnBegingetIssueTypes);
            }
            if ((this.onEndgetIssueTypesDelegate == null)) {
                this.onEndgetIssueTypesDelegate = new EndOperationDelegate(this.OnEndgetIssueTypes);
            }
            if ((this.ongetIssueTypesCompletedDelegate == null)) {
                this.ongetIssueTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetIssueTypesCompleted);
            }
            base.InvokeAsync(this.onBegingetIssueTypesDelegate, null, this.onEndgetIssueTypesDelegate, this.ongetIssueTypesCompletedDelegate, userState);
        }
        
        public void getSubTaskIssueTypes() {
            base.Channel.getSubTaskIssueTypes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSubTaskIssueTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSubTaskIssueTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetSubTaskIssueTypes(System.IAsyncResult result) {
            base.Channel.EndgetSubTaskIssueTypes(result);
        }
        
        private System.IAsyncResult OnBegingetSubTaskIssueTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetSubTaskIssueTypes(callback, asyncState);
        }
        
        private object[] OnEndgetSubTaskIssueTypes(System.IAsyncResult result) {
            this.EndgetSubTaskIssueTypes(result);
            return null;
        }
        
        private void OngetSubTaskIssueTypesCompleted(object state) {
            if ((this.getSubTaskIssueTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSubTaskIssueTypesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSubTaskIssueTypesAsync() {
            this.getSubTaskIssueTypesAsync(null);
        }
        
        public void getSubTaskIssueTypesAsync(object userState) {
            if ((this.onBegingetSubTaskIssueTypesDelegate == null)) {
                this.onBegingetSubTaskIssueTypesDelegate = new BeginOperationDelegate(this.OnBegingetSubTaskIssueTypes);
            }
            if ((this.onEndgetSubTaskIssueTypesDelegate == null)) {
                this.onEndgetSubTaskIssueTypesDelegate = new EndOperationDelegate(this.OnEndgetSubTaskIssueTypes);
            }
            if ((this.ongetSubTaskIssueTypesCompletedDelegate == null)) {
                this.ongetSubTaskIssueTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSubTaskIssueTypesCompleted);
            }
            base.InvokeAsync(this.onBegingetSubTaskIssueTypesDelegate, null, this.onEndgetSubTaskIssueTypesDelegate, this.ongetSubTaskIssueTypesCompletedDelegate, userState);
        }
        
        public void getStatuses() {
            base.Channel.getStatuses();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetStatuses(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetStatuses(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetStatuses(System.IAsyncResult result) {
            base.Channel.EndgetStatuses(result);
        }
        
        private System.IAsyncResult OnBegingetStatuses(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetStatuses(callback, asyncState);
        }
        
        private object[] OnEndgetStatuses(System.IAsyncResult result) {
            this.EndgetStatuses(result);
            return null;
        }
        
        private void OngetStatusesCompleted(object state) {
            if ((this.getStatusesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getStatusesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getStatusesAsync() {
            this.getStatusesAsync(null);
        }
        
        public void getStatusesAsync(object userState) {
            if ((this.onBegingetStatusesDelegate == null)) {
                this.onBegingetStatusesDelegate = new BeginOperationDelegate(this.OnBegingetStatuses);
            }
            if ((this.onEndgetStatusesDelegate == null)) {
                this.onEndgetStatusesDelegate = new EndOperationDelegate(this.OnEndgetStatuses);
            }
            if ((this.ongetStatusesCompletedDelegate == null)) {
                this.ongetStatusesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetStatusesCompleted);
            }
            base.InvokeAsync(this.onBegingetStatusesDelegate, null, this.onEndgetStatusesDelegate, this.ongetStatusesCompletedDelegate, userState);
        }
        
        public void getIssueTypesForProject() {
            base.Channel.getIssueTypesForProject();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetIssueTypesForProject(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetIssueTypesForProject(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetIssueTypesForProject(System.IAsyncResult result) {
            base.Channel.EndgetIssueTypesForProject(result);
        }
        
        private System.IAsyncResult OnBegingetIssueTypesForProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetIssueTypesForProject(callback, asyncState);
        }
        
        private object[] OnEndgetIssueTypesForProject(System.IAsyncResult result) {
            this.EndgetIssueTypesForProject(result);
            return null;
        }
        
        private void OngetIssueTypesForProjectCompleted(object state) {
            if ((this.getIssueTypesForProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getIssueTypesForProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getIssueTypesForProjectAsync() {
            this.getIssueTypesForProjectAsync(null);
        }
        
        public void getIssueTypesForProjectAsync(object userState) {
            if ((this.onBegingetIssueTypesForProjectDelegate == null)) {
                this.onBegingetIssueTypesForProjectDelegate = new BeginOperationDelegate(this.OnBegingetIssueTypesForProject);
            }
            if ((this.onEndgetIssueTypesForProjectDelegate == null)) {
                this.onEndgetIssueTypesForProjectDelegate = new EndOperationDelegate(this.OnEndgetIssueTypesForProject);
            }
            if ((this.ongetIssueTypesForProjectCompletedDelegate == null)) {
                this.ongetIssueTypesForProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetIssueTypesForProjectCompleted);
            }
            base.InvokeAsync(this.onBegingetIssueTypesForProjectDelegate, null, this.onEndgetIssueTypesForProjectDelegate, this.ongetIssueTypesForProjectCompletedDelegate, userState);
        }
        
        public void getProjectRoles() {
            base.Channel.getProjectRoles();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProjectRoles(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProjectRoles(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetProjectRoles(System.IAsyncResult result) {
            base.Channel.EndgetProjectRoles(result);
        }
        
        private System.IAsyncResult OnBegingetProjectRoles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetProjectRoles(callback, asyncState);
        }
        
        private object[] OnEndgetProjectRoles(System.IAsyncResult result) {
            this.EndgetProjectRoles(result);
            return null;
        }
        
        private void OngetProjectRolesCompleted(object state) {
            if ((this.getProjectRolesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProjectRolesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProjectRolesAsync() {
            this.getProjectRolesAsync(null);
        }
        
        public void getProjectRolesAsync(object userState) {
            if ((this.onBegingetProjectRolesDelegate == null)) {
                this.onBegingetProjectRolesDelegate = new BeginOperationDelegate(this.OnBegingetProjectRoles);
            }
            if ((this.onEndgetProjectRolesDelegate == null)) {
                this.onEndgetProjectRolesDelegate = new EndOperationDelegate(this.OnEndgetProjectRoles);
            }
            if ((this.ongetProjectRolesCompletedDelegate == null)) {
                this.ongetProjectRolesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProjectRolesCompleted);
            }
            base.InvokeAsync(this.onBegingetProjectRolesDelegate, null, this.onEndgetProjectRolesDelegate, this.ongetProjectRolesCompletedDelegate, userState);
        }
        
        public void getProjectRole() {
            base.Channel.getProjectRole();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProjectRole(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProjectRole(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetProjectRole(System.IAsyncResult result) {
            base.Channel.EndgetProjectRole(result);
        }
        
        private System.IAsyncResult OnBegingetProjectRole(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetProjectRole(callback, asyncState);
        }
        
        private object[] OnEndgetProjectRole(System.IAsyncResult result) {
            this.EndgetProjectRole(result);
            return null;
        }
        
        private void OngetProjectRoleCompleted(object state) {
            if ((this.getProjectRoleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProjectRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProjectRoleAsync() {
            this.getProjectRoleAsync(null);
        }
        
        public void getProjectRoleAsync(object userState) {
            if ((this.onBegingetProjectRoleDelegate == null)) {
                this.onBegingetProjectRoleDelegate = new BeginOperationDelegate(this.OnBegingetProjectRole);
            }
            if ((this.onEndgetProjectRoleDelegate == null)) {
                this.onEndgetProjectRoleDelegate = new EndOperationDelegate(this.OnEndgetProjectRole);
            }
            if ((this.ongetProjectRoleCompletedDelegate == null)) {
                this.ongetProjectRoleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProjectRoleCompleted);
            }
            base.InvokeAsync(this.onBegingetProjectRoleDelegate, null, this.onEndgetProjectRoleDelegate, this.ongetProjectRoleCompletedDelegate, userState);
        }
        
        public void getProjectRoleActors() {
            base.Channel.getProjectRoleActors();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProjectRoleActors(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProjectRoleActors(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetProjectRoleActors(System.IAsyncResult result) {
            base.Channel.EndgetProjectRoleActors(result);
        }
        
        private System.IAsyncResult OnBegingetProjectRoleActors(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetProjectRoleActors(callback, asyncState);
        }
        
        private object[] OnEndgetProjectRoleActors(System.IAsyncResult result) {
            this.EndgetProjectRoleActors(result);
            return null;
        }
        
        private void OngetProjectRoleActorsCompleted(object state) {
            if ((this.getProjectRoleActorsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProjectRoleActorsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProjectRoleActorsAsync() {
            this.getProjectRoleActorsAsync(null);
        }
        
        public void getProjectRoleActorsAsync(object userState) {
            if ((this.onBegingetProjectRoleActorsDelegate == null)) {
                this.onBegingetProjectRoleActorsDelegate = new BeginOperationDelegate(this.OnBegingetProjectRoleActors);
            }
            if ((this.onEndgetProjectRoleActorsDelegate == null)) {
                this.onEndgetProjectRoleActorsDelegate = new EndOperationDelegate(this.OnEndgetProjectRoleActors);
            }
            if ((this.ongetProjectRoleActorsCompletedDelegate == null)) {
                this.ongetProjectRoleActorsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProjectRoleActorsCompleted);
            }
            base.InvokeAsync(this.onBegingetProjectRoleActorsDelegate, null, this.onEndgetProjectRoleActorsDelegate, this.ongetProjectRoleActorsCompletedDelegate, userState);
        }
        
        public void getDefaultRoleActors() {
            base.Channel.getDefaultRoleActors();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetDefaultRoleActors(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetDefaultRoleActors(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetDefaultRoleActors(System.IAsyncResult result) {
            base.Channel.EndgetDefaultRoleActors(result);
        }
        
        private System.IAsyncResult OnBegingetDefaultRoleActors(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetDefaultRoleActors(callback, asyncState);
        }
        
        private object[] OnEndgetDefaultRoleActors(System.IAsyncResult result) {
            this.EndgetDefaultRoleActors(result);
            return null;
        }
        
        private void OngetDefaultRoleActorsCompleted(object state) {
            if ((this.getDefaultRoleActorsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getDefaultRoleActorsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getDefaultRoleActorsAsync() {
            this.getDefaultRoleActorsAsync(null);
        }
        
        public void getDefaultRoleActorsAsync(object userState) {
            if ((this.onBegingetDefaultRoleActorsDelegate == null)) {
                this.onBegingetDefaultRoleActorsDelegate = new BeginOperationDelegate(this.OnBegingetDefaultRoleActors);
            }
            if ((this.onEndgetDefaultRoleActorsDelegate == null)) {
                this.onEndgetDefaultRoleActorsDelegate = new EndOperationDelegate(this.OnEndgetDefaultRoleActors);
            }
            if ((this.ongetDefaultRoleActorsCompletedDelegate == null)) {
                this.ongetDefaultRoleActorsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetDefaultRoleActorsCompleted);
            }
            base.InvokeAsync(this.onBegingetDefaultRoleActorsDelegate, null, this.onEndgetDefaultRoleActorsDelegate, this.ongetDefaultRoleActorsCompletedDelegate, userState);
        }
        
        public void removeAllRoleActorsByNameAndType() {
            base.Channel.removeAllRoleActorsByNameAndType();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginremoveAllRoleActorsByNameAndType(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremoveAllRoleActorsByNameAndType(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndremoveAllRoleActorsByNameAndType(System.IAsyncResult result) {
            base.Channel.EndremoveAllRoleActorsByNameAndType(result);
        }
        
        private System.IAsyncResult OnBeginremoveAllRoleActorsByNameAndType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginremoveAllRoleActorsByNameAndType(callback, asyncState);
        }
        
        private object[] OnEndremoveAllRoleActorsByNameAndType(System.IAsyncResult result) {
            this.EndremoveAllRoleActorsByNameAndType(result);
            return null;
        }
        
        private void OnremoveAllRoleActorsByNameAndTypeCompleted(object state) {
            if ((this.removeAllRoleActorsByNameAndTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removeAllRoleActorsByNameAndTypeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removeAllRoleActorsByNameAndTypeAsync() {
            this.removeAllRoleActorsByNameAndTypeAsync(null);
        }
        
        public void removeAllRoleActorsByNameAndTypeAsync(object userState) {
            if ((this.onBeginremoveAllRoleActorsByNameAndTypeDelegate == null)) {
                this.onBeginremoveAllRoleActorsByNameAndTypeDelegate = new BeginOperationDelegate(this.OnBeginremoveAllRoleActorsByNameAndType);
            }
            if ((this.onEndremoveAllRoleActorsByNameAndTypeDelegate == null)) {
                this.onEndremoveAllRoleActorsByNameAndTypeDelegate = new EndOperationDelegate(this.OnEndremoveAllRoleActorsByNameAndType);
            }
            if ((this.onremoveAllRoleActorsByNameAndTypeCompletedDelegate == null)) {
                this.onremoveAllRoleActorsByNameAndTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremoveAllRoleActorsByNameAndTypeCompleted);
            }
            base.InvokeAsync(this.onBeginremoveAllRoleActorsByNameAndTypeDelegate, null, this.onEndremoveAllRoleActorsByNameAndTypeDelegate, this.onremoveAllRoleActorsByNameAndTypeCompletedDelegate, userState);
        }
        
        public void deleteProjectRole() {
            base.Channel.deleteProjectRole();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeleteProjectRole(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteProjectRole(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnddeleteProjectRole(System.IAsyncResult result) {
            base.Channel.EnddeleteProjectRole(result);
        }
        
        private System.IAsyncResult OnBegindeleteProjectRole(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegindeleteProjectRole(callback, asyncState);
        }
        
        private object[] OnEnddeleteProjectRole(System.IAsyncResult result) {
            this.EnddeleteProjectRole(result);
            return null;
        }
        
        private void OndeleteProjectRoleCompleted(object state) {
            if ((this.deleteProjectRoleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteProjectRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteProjectRoleAsync() {
            this.deleteProjectRoleAsync(null);
        }
        
        public void deleteProjectRoleAsync(object userState) {
            if ((this.onBegindeleteProjectRoleDelegate == null)) {
                this.onBegindeleteProjectRoleDelegate = new BeginOperationDelegate(this.OnBegindeleteProjectRole);
            }
            if ((this.onEnddeleteProjectRoleDelegate == null)) {
                this.onEnddeleteProjectRoleDelegate = new EndOperationDelegate(this.OnEnddeleteProjectRole);
            }
            if ((this.ondeleteProjectRoleCompletedDelegate == null)) {
                this.ondeleteProjectRoleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteProjectRoleCompleted);
            }
            base.InvokeAsync(this.onBegindeleteProjectRoleDelegate, null, this.onEnddeleteProjectRoleDelegate, this.ondeleteProjectRoleCompletedDelegate, userState);
        }
        
        public void updateProjectRole() {
            base.Channel.updateProjectRole();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateProjectRole(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateProjectRole(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateProjectRole(System.IAsyncResult result) {
            base.Channel.EndupdateProjectRole(result);
        }
        
        private System.IAsyncResult OnBeginupdateProjectRole(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginupdateProjectRole(callback, asyncState);
        }
        
        private object[] OnEndupdateProjectRole(System.IAsyncResult result) {
            this.EndupdateProjectRole(result);
            return null;
        }
        
        private void OnupdateProjectRoleCompleted(object state) {
            if ((this.updateProjectRoleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateProjectRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateProjectRoleAsync() {
            this.updateProjectRoleAsync(null);
        }
        
        public void updateProjectRoleAsync(object userState) {
            if ((this.onBeginupdateProjectRoleDelegate == null)) {
                this.onBeginupdateProjectRoleDelegate = new BeginOperationDelegate(this.OnBeginupdateProjectRole);
            }
            if ((this.onEndupdateProjectRoleDelegate == null)) {
                this.onEndupdateProjectRoleDelegate = new EndOperationDelegate(this.OnEndupdateProjectRole);
            }
            if ((this.onupdateProjectRoleCompletedDelegate == null)) {
                this.onupdateProjectRoleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateProjectRoleCompleted);
            }
            base.InvokeAsync(this.onBeginupdateProjectRoleDelegate, null, this.onEndupdateProjectRoleDelegate, this.onupdateProjectRoleCompletedDelegate, userState);
        }
        
        public void createProjectRole() {
            base.Channel.createProjectRole();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincreateProjectRole(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateProjectRole(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndcreateProjectRole(System.IAsyncResult result) {
            base.Channel.EndcreateProjectRole(result);
        }
        
        private System.IAsyncResult OnBegincreateProjectRole(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegincreateProjectRole(callback, asyncState);
        }
        
        private object[] OnEndcreateProjectRole(System.IAsyncResult result) {
            this.EndcreateProjectRole(result);
            return null;
        }
        
        private void OncreateProjectRoleCompleted(object state) {
            if ((this.createProjectRoleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createProjectRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createProjectRoleAsync() {
            this.createProjectRoleAsync(null);
        }
        
        public void createProjectRoleAsync(object userState) {
            if ((this.onBegincreateProjectRoleDelegate == null)) {
                this.onBegincreateProjectRoleDelegate = new BeginOperationDelegate(this.OnBegincreateProjectRole);
            }
            if ((this.onEndcreateProjectRoleDelegate == null)) {
                this.onEndcreateProjectRoleDelegate = new EndOperationDelegate(this.OnEndcreateProjectRole);
            }
            if ((this.oncreateProjectRoleCompletedDelegate == null)) {
                this.oncreateProjectRoleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateProjectRoleCompleted);
            }
            base.InvokeAsync(this.onBegincreateProjectRoleDelegate, null, this.onEndcreateProjectRoleDelegate, this.oncreateProjectRoleCompletedDelegate, userState);
        }
        
        public void isProjectRoleNameUnique() {
            base.Channel.isProjectRoleNameUnique();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginisProjectRoleNameUnique(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginisProjectRoleNameUnique(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndisProjectRoleNameUnique(System.IAsyncResult result) {
            base.Channel.EndisProjectRoleNameUnique(result);
        }
        
        private System.IAsyncResult OnBeginisProjectRoleNameUnique(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginisProjectRoleNameUnique(callback, asyncState);
        }
        
        private object[] OnEndisProjectRoleNameUnique(System.IAsyncResult result) {
            this.EndisProjectRoleNameUnique(result);
            return null;
        }
        
        private void OnisProjectRoleNameUniqueCompleted(object state) {
            if ((this.isProjectRoleNameUniqueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.isProjectRoleNameUniqueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void isProjectRoleNameUniqueAsync() {
            this.isProjectRoleNameUniqueAsync(null);
        }
        
        public void isProjectRoleNameUniqueAsync(object userState) {
            if ((this.onBeginisProjectRoleNameUniqueDelegate == null)) {
                this.onBeginisProjectRoleNameUniqueDelegate = new BeginOperationDelegate(this.OnBeginisProjectRoleNameUnique);
            }
            if ((this.onEndisProjectRoleNameUniqueDelegate == null)) {
                this.onEndisProjectRoleNameUniqueDelegate = new EndOperationDelegate(this.OnEndisProjectRoleNameUnique);
            }
            if ((this.onisProjectRoleNameUniqueCompletedDelegate == null)) {
                this.onisProjectRoleNameUniqueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnisProjectRoleNameUniqueCompleted);
            }
            base.InvokeAsync(this.onBeginisProjectRoleNameUniqueDelegate, null, this.onEndisProjectRoleNameUniqueDelegate, this.onisProjectRoleNameUniqueCompletedDelegate, userState);
        }
        
        public void addActorsToProjectRole() {
            base.Channel.addActorsToProjectRole();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddActorsToProjectRole(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddActorsToProjectRole(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndaddActorsToProjectRole(System.IAsyncResult result) {
            base.Channel.EndaddActorsToProjectRole(result);
        }
        
        private System.IAsyncResult OnBeginaddActorsToProjectRole(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginaddActorsToProjectRole(callback, asyncState);
        }
        
        private object[] OnEndaddActorsToProjectRole(System.IAsyncResult result) {
            this.EndaddActorsToProjectRole(result);
            return null;
        }
        
        private void OnaddActorsToProjectRoleCompleted(object state) {
            if ((this.addActorsToProjectRoleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addActorsToProjectRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addActorsToProjectRoleAsync() {
            this.addActorsToProjectRoleAsync(null);
        }
        
        public void addActorsToProjectRoleAsync(object userState) {
            if ((this.onBeginaddActorsToProjectRoleDelegate == null)) {
                this.onBeginaddActorsToProjectRoleDelegate = new BeginOperationDelegate(this.OnBeginaddActorsToProjectRole);
            }
            if ((this.onEndaddActorsToProjectRoleDelegate == null)) {
                this.onEndaddActorsToProjectRoleDelegate = new EndOperationDelegate(this.OnEndaddActorsToProjectRole);
            }
            if ((this.onaddActorsToProjectRoleCompletedDelegate == null)) {
                this.onaddActorsToProjectRoleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddActorsToProjectRoleCompleted);
            }
            base.InvokeAsync(this.onBeginaddActorsToProjectRoleDelegate, null, this.onEndaddActorsToProjectRoleDelegate, this.onaddActorsToProjectRoleCompletedDelegate, userState);
        }
        
        public void removeActorsFromProjectRole() {
            base.Channel.removeActorsFromProjectRole();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginremoveActorsFromProjectRole(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremoveActorsFromProjectRole(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndremoveActorsFromProjectRole(System.IAsyncResult result) {
            base.Channel.EndremoveActorsFromProjectRole(result);
        }
        
        private System.IAsyncResult OnBeginremoveActorsFromProjectRole(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginremoveActorsFromProjectRole(callback, asyncState);
        }
        
        private object[] OnEndremoveActorsFromProjectRole(System.IAsyncResult result) {
            this.EndremoveActorsFromProjectRole(result);
            return null;
        }
        
        private void OnremoveActorsFromProjectRoleCompleted(object state) {
            if ((this.removeActorsFromProjectRoleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removeActorsFromProjectRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removeActorsFromProjectRoleAsync() {
            this.removeActorsFromProjectRoleAsync(null);
        }
        
        public void removeActorsFromProjectRoleAsync(object userState) {
            if ((this.onBeginremoveActorsFromProjectRoleDelegate == null)) {
                this.onBeginremoveActorsFromProjectRoleDelegate = new BeginOperationDelegate(this.OnBeginremoveActorsFromProjectRole);
            }
            if ((this.onEndremoveActorsFromProjectRoleDelegate == null)) {
                this.onEndremoveActorsFromProjectRoleDelegate = new EndOperationDelegate(this.OnEndremoveActorsFromProjectRole);
            }
            if ((this.onremoveActorsFromProjectRoleCompletedDelegate == null)) {
                this.onremoveActorsFromProjectRoleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremoveActorsFromProjectRoleCompleted);
            }
            base.InvokeAsync(this.onBeginremoveActorsFromProjectRoleDelegate, null, this.onEndremoveActorsFromProjectRoleDelegate, this.onremoveActorsFromProjectRoleCompletedDelegate, userState);
        }
        
        public void addDefaultActorsToProjectRole() {
            base.Channel.addDefaultActorsToProjectRole();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddDefaultActorsToProjectRole(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddDefaultActorsToProjectRole(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndaddDefaultActorsToProjectRole(System.IAsyncResult result) {
            base.Channel.EndaddDefaultActorsToProjectRole(result);
        }
        
        private System.IAsyncResult OnBeginaddDefaultActorsToProjectRole(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginaddDefaultActorsToProjectRole(callback, asyncState);
        }
        
        private object[] OnEndaddDefaultActorsToProjectRole(System.IAsyncResult result) {
            this.EndaddDefaultActorsToProjectRole(result);
            return null;
        }
        
        private void OnaddDefaultActorsToProjectRoleCompleted(object state) {
            if ((this.addDefaultActorsToProjectRoleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addDefaultActorsToProjectRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addDefaultActorsToProjectRoleAsync() {
            this.addDefaultActorsToProjectRoleAsync(null);
        }
        
        public void addDefaultActorsToProjectRoleAsync(object userState) {
            if ((this.onBeginaddDefaultActorsToProjectRoleDelegate == null)) {
                this.onBeginaddDefaultActorsToProjectRoleDelegate = new BeginOperationDelegate(this.OnBeginaddDefaultActorsToProjectRole);
            }
            if ((this.onEndaddDefaultActorsToProjectRoleDelegate == null)) {
                this.onEndaddDefaultActorsToProjectRoleDelegate = new EndOperationDelegate(this.OnEndaddDefaultActorsToProjectRole);
            }
            if ((this.onaddDefaultActorsToProjectRoleCompletedDelegate == null)) {
                this.onaddDefaultActorsToProjectRoleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddDefaultActorsToProjectRoleCompleted);
            }
            base.InvokeAsync(this.onBeginaddDefaultActorsToProjectRoleDelegate, null, this.onEndaddDefaultActorsToProjectRoleDelegate, this.onaddDefaultActorsToProjectRoleCompletedDelegate, userState);
        }
        
        public void removeDefaultActorsFromProjectRole() {
            base.Channel.removeDefaultActorsFromProjectRole();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginremoveDefaultActorsFromProjectRole(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremoveDefaultActorsFromProjectRole(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndremoveDefaultActorsFromProjectRole(System.IAsyncResult result) {
            base.Channel.EndremoveDefaultActorsFromProjectRole(result);
        }
        
        private System.IAsyncResult OnBeginremoveDefaultActorsFromProjectRole(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginremoveDefaultActorsFromProjectRole(callback, asyncState);
        }
        
        private object[] OnEndremoveDefaultActorsFromProjectRole(System.IAsyncResult result) {
            this.EndremoveDefaultActorsFromProjectRole(result);
            return null;
        }
        
        private void OnremoveDefaultActorsFromProjectRoleCompleted(object state) {
            if ((this.removeDefaultActorsFromProjectRoleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removeDefaultActorsFromProjectRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removeDefaultActorsFromProjectRoleAsync() {
            this.removeDefaultActorsFromProjectRoleAsync(null);
        }
        
        public void removeDefaultActorsFromProjectRoleAsync(object userState) {
            if ((this.onBeginremoveDefaultActorsFromProjectRoleDelegate == null)) {
                this.onBeginremoveDefaultActorsFromProjectRoleDelegate = new BeginOperationDelegate(this.OnBeginremoveDefaultActorsFromProjectRole);
            }
            if ((this.onEndremoveDefaultActorsFromProjectRoleDelegate == null)) {
                this.onEndremoveDefaultActorsFromProjectRoleDelegate = new EndOperationDelegate(this.OnEndremoveDefaultActorsFromProjectRole);
            }
            if ((this.onremoveDefaultActorsFromProjectRoleCompletedDelegate == null)) {
                this.onremoveDefaultActorsFromProjectRoleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremoveDefaultActorsFromProjectRoleCompleted);
            }
            base.InvokeAsync(this.onBeginremoveDefaultActorsFromProjectRoleDelegate, null, this.onEndremoveDefaultActorsFromProjectRoleDelegate, this.onremoveDefaultActorsFromProjectRoleCompletedDelegate, userState);
        }
        
        public void getAssociatedNotificationSchemes() {
            base.Channel.getAssociatedNotificationSchemes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAssociatedNotificationSchemes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAssociatedNotificationSchemes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetAssociatedNotificationSchemes(System.IAsyncResult result) {
            base.Channel.EndgetAssociatedNotificationSchemes(result);
        }
        
        private System.IAsyncResult OnBegingetAssociatedNotificationSchemes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetAssociatedNotificationSchemes(callback, asyncState);
        }
        
        private object[] OnEndgetAssociatedNotificationSchemes(System.IAsyncResult result) {
            this.EndgetAssociatedNotificationSchemes(result);
            return null;
        }
        
        private void OngetAssociatedNotificationSchemesCompleted(object state) {
            if ((this.getAssociatedNotificationSchemesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAssociatedNotificationSchemesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAssociatedNotificationSchemesAsync() {
            this.getAssociatedNotificationSchemesAsync(null);
        }
        
        public void getAssociatedNotificationSchemesAsync(object userState) {
            if ((this.onBegingetAssociatedNotificationSchemesDelegate == null)) {
                this.onBegingetAssociatedNotificationSchemesDelegate = new BeginOperationDelegate(this.OnBegingetAssociatedNotificationSchemes);
            }
            if ((this.onEndgetAssociatedNotificationSchemesDelegate == null)) {
                this.onEndgetAssociatedNotificationSchemesDelegate = new EndOperationDelegate(this.OnEndgetAssociatedNotificationSchemes);
            }
            if ((this.ongetAssociatedNotificationSchemesCompletedDelegate == null)) {
                this.ongetAssociatedNotificationSchemesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAssociatedNotificationSchemesCompleted);
            }
            base.InvokeAsync(this.onBegingetAssociatedNotificationSchemesDelegate, null, this.onEndgetAssociatedNotificationSchemesDelegate, this.ongetAssociatedNotificationSchemesCompletedDelegate, userState);
        }
        
        public void getAssociatedPermissionSchemes() {
            base.Channel.getAssociatedPermissionSchemes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAssociatedPermissionSchemes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAssociatedPermissionSchemes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetAssociatedPermissionSchemes(System.IAsyncResult result) {
            base.Channel.EndgetAssociatedPermissionSchemes(result);
        }
        
        private System.IAsyncResult OnBegingetAssociatedPermissionSchemes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetAssociatedPermissionSchemes(callback, asyncState);
        }
        
        private object[] OnEndgetAssociatedPermissionSchemes(System.IAsyncResult result) {
            this.EndgetAssociatedPermissionSchemes(result);
            return null;
        }
        
        private void OngetAssociatedPermissionSchemesCompleted(object state) {
            if ((this.getAssociatedPermissionSchemesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAssociatedPermissionSchemesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAssociatedPermissionSchemesAsync() {
            this.getAssociatedPermissionSchemesAsync(null);
        }
        
        public void getAssociatedPermissionSchemesAsync(object userState) {
            if ((this.onBegingetAssociatedPermissionSchemesDelegate == null)) {
                this.onBegingetAssociatedPermissionSchemesDelegate = new BeginOperationDelegate(this.OnBegingetAssociatedPermissionSchemes);
            }
            if ((this.onEndgetAssociatedPermissionSchemesDelegate == null)) {
                this.onEndgetAssociatedPermissionSchemesDelegate = new EndOperationDelegate(this.OnEndgetAssociatedPermissionSchemes);
            }
            if ((this.ongetAssociatedPermissionSchemesCompletedDelegate == null)) {
                this.ongetAssociatedPermissionSchemesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAssociatedPermissionSchemesCompleted);
            }
            base.InvokeAsync(this.onBegingetAssociatedPermissionSchemesDelegate, null, this.onEndgetAssociatedPermissionSchemesDelegate, this.ongetAssociatedPermissionSchemesCompletedDelegate, userState);
        }
        
        public void deleteProject() {
            base.Channel.deleteProject();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeleteProject(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteProject(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnddeleteProject(System.IAsyncResult result) {
            base.Channel.EnddeleteProject(result);
        }
        
        private System.IAsyncResult OnBegindeleteProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegindeleteProject(callback, asyncState);
        }
        
        private object[] OnEnddeleteProject(System.IAsyncResult result) {
            this.EnddeleteProject(result);
            return null;
        }
        
        private void OndeleteProjectCompleted(object state) {
            if ((this.deleteProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteProjectAsync() {
            this.deleteProjectAsync(null);
        }
        
        public void deleteProjectAsync(object userState) {
            if ((this.onBegindeleteProjectDelegate == null)) {
                this.onBegindeleteProjectDelegate = new BeginOperationDelegate(this.OnBegindeleteProject);
            }
            if ((this.onEnddeleteProjectDelegate == null)) {
                this.onEnddeleteProjectDelegate = new EndOperationDelegate(this.OnEnddeleteProject);
            }
            if ((this.ondeleteProjectCompletedDelegate == null)) {
                this.ondeleteProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteProjectCompleted);
            }
            base.InvokeAsync(this.onBegindeleteProjectDelegate, null, this.onEnddeleteProjectDelegate, this.ondeleteProjectCompletedDelegate, userState);
        }
        
        public void getProjectById() {
            base.Channel.getProjectById();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProjectById(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProjectById(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetProjectById(System.IAsyncResult result) {
            base.Channel.EndgetProjectById(result);
        }
        
        private System.IAsyncResult OnBegingetProjectById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetProjectById(callback, asyncState);
        }
        
        private object[] OnEndgetProjectById(System.IAsyncResult result) {
            this.EndgetProjectById(result);
            return null;
        }
        
        private void OngetProjectByIdCompleted(object state) {
            if ((this.getProjectByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProjectByIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProjectByIdAsync() {
            this.getProjectByIdAsync(null);
        }
        
        public void getProjectByIdAsync(object userState) {
            if ((this.onBegingetProjectByIdDelegate == null)) {
                this.onBegingetProjectByIdDelegate = new BeginOperationDelegate(this.OnBegingetProjectById);
            }
            if ((this.onEndgetProjectByIdDelegate == null)) {
                this.onEndgetProjectByIdDelegate = new EndOperationDelegate(this.OnEndgetProjectById);
            }
            if ((this.ongetProjectByIdCompletedDelegate == null)) {
                this.ongetProjectByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProjectByIdCompleted);
            }
            base.InvokeAsync(this.onBegingetProjectByIdDelegate, null, this.onEndgetProjectByIdDelegate, this.ongetProjectByIdCompletedDelegate, userState);
        }
        
        public void getVersions() {
            base.Channel.getVersions();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetVersions(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetVersions(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetVersions(System.IAsyncResult result) {
            base.Channel.EndgetVersions(result);
        }
        
        private System.IAsyncResult OnBegingetVersions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetVersions(callback, asyncState);
        }
        
        private object[] OnEndgetVersions(System.IAsyncResult result) {
            this.EndgetVersions(result);
            return null;
        }
        
        private void OngetVersionsCompleted(object state) {
            if ((this.getVersionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getVersionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getVersionsAsync() {
            this.getVersionsAsync(null);
        }
        
        public void getVersionsAsync(object userState) {
            if ((this.onBegingetVersionsDelegate == null)) {
                this.onBegingetVersionsDelegate = new BeginOperationDelegate(this.OnBegingetVersions);
            }
            if ((this.onEndgetVersionsDelegate == null)) {
                this.onEndgetVersionsDelegate = new EndOperationDelegate(this.OnEndgetVersions);
            }
            if ((this.ongetVersionsCompletedDelegate == null)) {
                this.ongetVersionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetVersionsCompleted);
            }
            base.InvokeAsync(this.onBegingetVersionsDelegate, null, this.onEndgetVersionsDelegate, this.ongetVersionsCompletedDelegate, userState);
        }
        
        public void getComments() {
            base.Channel.getComments();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetComments(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetComments(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetComments(System.IAsyncResult result) {
            base.Channel.EndgetComments(result);
        }
        
        private System.IAsyncResult OnBegingetComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetComments(callback, asyncState);
        }
        
        private object[] OnEndgetComments(System.IAsyncResult result) {
            this.EndgetComments(result);
            return null;
        }
        
        private void OngetCommentsCompleted(object state) {
            if ((this.getCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCommentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCommentsAsync() {
            this.getCommentsAsync(null);
        }
        
        public void getCommentsAsync(object userState) {
            if ((this.onBegingetCommentsDelegate == null)) {
                this.onBegingetCommentsDelegate = new BeginOperationDelegate(this.OnBegingetComments);
            }
            if ((this.onEndgetCommentsDelegate == null)) {
                this.onEndgetCommentsDelegate = new EndOperationDelegate(this.OnEndgetComments);
            }
            if ((this.ongetCommentsCompletedDelegate == null)) {
                this.ongetCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCommentsCompleted);
            }
            base.InvokeAsync(this.onBegingetCommentsDelegate, null, this.onEndgetCommentsDelegate, this.ongetCommentsCompletedDelegate, userState);
        }
        
        public void getFavouriteFilters() {
            base.Channel.getFavouriteFilters();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetFavouriteFilters(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFavouriteFilters(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetFavouriteFilters(System.IAsyncResult result) {
            base.Channel.EndgetFavouriteFilters(result);
        }
        
        private System.IAsyncResult OnBegingetFavouriteFilters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetFavouriteFilters(callback, asyncState);
        }
        
        private object[] OnEndgetFavouriteFilters(System.IAsyncResult result) {
            this.EndgetFavouriteFilters(result);
            return null;
        }
        
        private void OngetFavouriteFiltersCompleted(object state) {
            if ((this.getFavouriteFiltersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFavouriteFiltersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFavouriteFiltersAsync() {
            this.getFavouriteFiltersAsync(null);
        }
        
        public void getFavouriteFiltersAsync(object userState) {
            if ((this.onBegingetFavouriteFiltersDelegate == null)) {
                this.onBegingetFavouriteFiltersDelegate = new BeginOperationDelegate(this.OnBegingetFavouriteFilters);
            }
            if ((this.onEndgetFavouriteFiltersDelegate == null)) {
                this.onEndgetFavouriteFiltersDelegate = new EndOperationDelegate(this.OnEndgetFavouriteFilters);
            }
            if ((this.ongetFavouriteFiltersCompletedDelegate == null)) {
                this.ongetFavouriteFiltersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFavouriteFiltersCompleted);
            }
            base.InvokeAsync(this.onBegingetFavouriteFiltersDelegate, null, this.onEndgetFavouriteFiltersDelegate, this.ongetFavouriteFiltersCompletedDelegate, userState);
        }
        
        public void releaseVersion() {
            base.Channel.releaseVersion();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginreleaseVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginreleaseVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndreleaseVersion(System.IAsyncResult result) {
            base.Channel.EndreleaseVersion(result);
        }
        
        private System.IAsyncResult OnBeginreleaseVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginreleaseVersion(callback, asyncState);
        }
        
        private object[] OnEndreleaseVersion(System.IAsyncResult result) {
            this.EndreleaseVersion(result);
            return null;
        }
        
        private void OnreleaseVersionCompleted(object state) {
            if ((this.releaseVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.releaseVersionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void releaseVersionAsync() {
            this.releaseVersionAsync(null);
        }
        
        public void releaseVersionAsync(object userState) {
            if ((this.onBeginreleaseVersionDelegate == null)) {
                this.onBeginreleaseVersionDelegate = new BeginOperationDelegate(this.OnBeginreleaseVersion);
            }
            if ((this.onEndreleaseVersionDelegate == null)) {
                this.onEndreleaseVersionDelegate = new EndOperationDelegate(this.OnEndreleaseVersion);
            }
            if ((this.onreleaseVersionCompletedDelegate == null)) {
                this.onreleaseVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnreleaseVersionCompleted);
            }
            base.InvokeAsync(this.onBeginreleaseVersionDelegate, null, this.onEndreleaseVersionDelegate, this.onreleaseVersionCompletedDelegate, userState);
        }
        
        public void archiveVersion() {
            base.Channel.archiveVersion();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginarchiveVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginarchiveVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndarchiveVersion(System.IAsyncResult result) {
            base.Channel.EndarchiveVersion(result);
        }
        
        private System.IAsyncResult OnBeginarchiveVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginarchiveVersion(callback, asyncState);
        }
        
        private object[] OnEndarchiveVersion(System.IAsyncResult result) {
            this.EndarchiveVersion(result);
            return null;
        }
        
        private void OnarchiveVersionCompleted(object state) {
            if ((this.archiveVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.archiveVersionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void archiveVersionAsync() {
            this.archiveVersionAsync(null);
        }
        
        public void archiveVersionAsync(object userState) {
            if ((this.onBeginarchiveVersionDelegate == null)) {
                this.onBeginarchiveVersionDelegate = new BeginOperationDelegate(this.OnBeginarchiveVersion);
            }
            if ((this.onEndarchiveVersionDelegate == null)) {
                this.onEndarchiveVersionDelegate = new EndOperationDelegate(this.OnEndarchiveVersion);
            }
            if ((this.onarchiveVersionCompletedDelegate == null)) {
                this.onarchiveVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnarchiveVersionCompleted);
            }
            base.InvokeAsync(this.onBeginarchiveVersionDelegate, null, this.onEndarchiveVersionDelegate, this.onarchiveVersionCompletedDelegate, userState);
        }
        
        public void getFieldsForCreate() {
            base.Channel.getFieldsForCreate();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetFieldsForCreate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFieldsForCreate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetFieldsForCreate(System.IAsyncResult result) {
            base.Channel.EndgetFieldsForCreate(result);
        }
        
        private System.IAsyncResult OnBegingetFieldsForCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetFieldsForCreate(callback, asyncState);
        }
        
        private object[] OnEndgetFieldsForCreate(System.IAsyncResult result) {
            this.EndgetFieldsForCreate(result);
            return null;
        }
        
        private void OngetFieldsForCreateCompleted(object state) {
            if ((this.getFieldsForCreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFieldsForCreateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFieldsForCreateAsync() {
            this.getFieldsForCreateAsync(null);
        }
        
        public void getFieldsForCreateAsync(object userState) {
            if ((this.onBegingetFieldsForCreateDelegate == null)) {
                this.onBegingetFieldsForCreateDelegate = new BeginOperationDelegate(this.OnBegingetFieldsForCreate);
            }
            if ((this.onEndgetFieldsForCreateDelegate == null)) {
                this.onEndgetFieldsForCreateDelegate = new EndOperationDelegate(this.OnEndgetFieldsForCreate);
            }
            if ((this.ongetFieldsForCreateCompletedDelegate == null)) {
                this.ongetFieldsForCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFieldsForCreateCompleted);
            }
            base.InvokeAsync(this.onBegingetFieldsForCreateDelegate, null, this.onEndgetFieldsForCreateDelegate, this.ongetFieldsForCreateCompletedDelegate, userState);
        }
        
        public void getFieldsForEdit() {
            base.Channel.getFieldsForEdit();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetFieldsForEdit(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFieldsForEdit(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetFieldsForEdit(System.IAsyncResult result) {
            base.Channel.EndgetFieldsForEdit(result);
        }
        
        private System.IAsyncResult OnBegingetFieldsForEdit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetFieldsForEdit(callback, asyncState);
        }
        
        private object[] OnEndgetFieldsForEdit(System.IAsyncResult result) {
            this.EndgetFieldsForEdit(result);
            return null;
        }
        
        private void OngetFieldsForEditCompleted(object state) {
            if ((this.getFieldsForEditCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFieldsForEditCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFieldsForEditAsync() {
            this.getFieldsForEditAsync(null);
        }
        
        public void getFieldsForEditAsync(object userState) {
            if ((this.onBegingetFieldsForEditDelegate == null)) {
                this.onBegingetFieldsForEditDelegate = new BeginOperationDelegate(this.OnBegingetFieldsForEdit);
            }
            if ((this.onEndgetFieldsForEditDelegate == null)) {
                this.onEndgetFieldsForEditDelegate = new EndOperationDelegate(this.OnEndgetFieldsForEdit);
            }
            if ((this.ongetFieldsForEditCompletedDelegate == null)) {
                this.ongetFieldsForEditCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFieldsForEditCompleted);
            }
            base.InvokeAsync(this.onBegingetFieldsForEditDelegate, null, this.onEndgetFieldsForEditDelegate, this.ongetFieldsForEditCompletedDelegate, userState);
        }
        
        public void getSubTaskIssueTypesForProject() {
            base.Channel.getSubTaskIssueTypesForProject();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSubTaskIssueTypesForProject(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSubTaskIssueTypesForProject(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetSubTaskIssueTypesForProject(System.IAsyncResult result) {
            base.Channel.EndgetSubTaskIssueTypesForProject(result);
        }
        
        private System.IAsyncResult OnBegingetSubTaskIssueTypesForProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetSubTaskIssueTypesForProject(callback, asyncState);
        }
        
        private object[] OnEndgetSubTaskIssueTypesForProject(System.IAsyncResult result) {
            this.EndgetSubTaskIssueTypesForProject(result);
            return null;
        }
        
        private void OngetSubTaskIssueTypesForProjectCompleted(object state) {
            if ((this.getSubTaskIssueTypesForProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSubTaskIssueTypesForProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSubTaskIssueTypesForProjectAsync() {
            this.getSubTaskIssueTypesForProjectAsync(null);
        }
        
        public void getSubTaskIssueTypesForProjectAsync(object userState) {
            if ((this.onBegingetSubTaskIssueTypesForProjectDelegate == null)) {
                this.onBegingetSubTaskIssueTypesForProjectDelegate = new BeginOperationDelegate(this.OnBegingetSubTaskIssueTypesForProject);
            }
            if ((this.onEndgetSubTaskIssueTypesForProjectDelegate == null)) {
                this.onEndgetSubTaskIssueTypesForProjectDelegate = new EndOperationDelegate(this.OnEndgetSubTaskIssueTypesForProject);
            }
            if ((this.ongetSubTaskIssueTypesForProjectCompletedDelegate == null)) {
                this.ongetSubTaskIssueTypesForProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSubTaskIssueTypesForProjectCompleted);
            }
            base.InvokeAsync(this.onBegingetSubTaskIssueTypesForProjectDelegate, null, this.onEndgetSubTaskIssueTypesForProjectDelegate, this.ongetSubTaskIssueTypesForProjectCompletedDelegate, userState);
        }
        
        public void getCustomFields() {
            base.Channel.getCustomFields();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCustomFields(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCustomFields(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetCustomFields(System.IAsyncResult result) {
            base.Channel.EndgetCustomFields(result);
        }
        
        private System.IAsyncResult OnBegingetCustomFields(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetCustomFields(callback, asyncState);
        }
        
        private object[] OnEndgetCustomFields(System.IAsyncResult result) {
            this.EndgetCustomFields(result);
            return null;
        }
        
        private void OngetCustomFieldsCompleted(object state) {
            if ((this.getCustomFieldsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCustomFieldsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCustomFieldsAsync() {
            this.getCustomFieldsAsync(null);
        }
        
        public void getCustomFieldsAsync(object userState) {
            if ((this.onBegingetCustomFieldsDelegate == null)) {
                this.onBegingetCustomFieldsDelegate = new BeginOperationDelegate(this.OnBegingetCustomFields);
            }
            if ((this.onEndgetCustomFieldsDelegate == null)) {
                this.onEndgetCustomFieldsDelegate = new EndOperationDelegate(this.OnEndgetCustomFields);
            }
            if ((this.ongetCustomFieldsCompletedDelegate == null)) {
                this.ongetCustomFieldsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCustomFieldsCompleted);
            }
            base.InvokeAsync(this.onBegingetCustomFieldsDelegate, null, this.onEndgetCustomFieldsDelegate, this.ongetCustomFieldsCompletedDelegate, userState);
        }
        
        public void logout() {
            base.Channel.logout();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Beginlogout(System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginlogout(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void Endlogout(System.IAsyncResult result) {
            base.Channel.Endlogout(result);
        }
        
        private System.IAsyncResult OnBeginlogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.Beginlogout(callback, asyncState);
        }
        
        private object[] OnEndlogout(System.IAsyncResult result) {
            this.Endlogout(result);
            return null;
        }
        
        private void OnlogoutCompleted(object state) {
            if ((this.logoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.logoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void logoutAsync() {
            this.logoutAsync(null);
        }
        
        public void logoutAsync(object userState) {
            if ((this.onBeginlogoutDelegate == null)) {
                this.onBeginlogoutDelegate = new BeginOperationDelegate(this.OnBeginlogout);
            }
            if ((this.onEndlogoutDelegate == null)) {
                this.onEndlogoutDelegate = new EndOperationDelegate(this.OnEndlogout);
            }
            if ((this.onlogoutCompletedDelegate == null)) {
                this.onlogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnlogoutCompleted);
            }
            base.InvokeAsync(this.onBeginlogoutDelegate, null, this.onEndlogoutDelegate, this.onlogoutCompletedDelegate, userState);
        }
        
        public void editComment() {
            base.Channel.editComment();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegineditComment(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegineditComment(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndeditComment(System.IAsyncResult result) {
            base.Channel.EndeditComment(result);
        }
        
        private System.IAsyncResult OnBegineditComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegineditComment(callback, asyncState);
        }
        
        private object[] OnEndeditComment(System.IAsyncResult result) {
            this.EndeditComment(result);
            return null;
        }
        
        private void OneditCommentCompleted(object state) {
            if ((this.editCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.editCommentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void editCommentAsync() {
            this.editCommentAsync(null);
        }
        
        public void editCommentAsync(object userState) {
            if ((this.onBegineditCommentDelegate == null)) {
                this.onBegineditCommentDelegate = new BeginOperationDelegate(this.OnBegineditComment);
            }
            if ((this.onEndeditCommentDelegate == null)) {
                this.onEndeditCommentDelegate = new EndOperationDelegate(this.OnEndeditComment);
            }
            if ((this.oneditCommentCompletedDelegate == null)) {
                this.oneditCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OneditCommentCompleted);
            }
            base.InvokeAsync(this.onBegineditCommentDelegate, null, this.onEndeditCommentDelegate, this.oneditCommentCompletedDelegate, userState);
        }
        
        public void getProjectWithSchemesById() {
            base.Channel.getProjectWithSchemesById();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProjectWithSchemesById(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProjectWithSchemesById(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetProjectWithSchemesById(System.IAsyncResult result) {
            base.Channel.EndgetProjectWithSchemesById(result);
        }
        
        private System.IAsyncResult OnBegingetProjectWithSchemesById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetProjectWithSchemesById(callback, asyncState);
        }
        
        private object[] OnEndgetProjectWithSchemesById(System.IAsyncResult result) {
            this.EndgetProjectWithSchemesById(result);
            return null;
        }
        
        private void OngetProjectWithSchemesByIdCompleted(object state) {
            if ((this.getProjectWithSchemesByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProjectWithSchemesByIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProjectWithSchemesByIdAsync() {
            this.getProjectWithSchemesByIdAsync(null);
        }
        
        public void getProjectWithSchemesByIdAsync(object userState) {
            if ((this.onBegingetProjectWithSchemesByIdDelegate == null)) {
                this.onBegingetProjectWithSchemesByIdDelegate = new BeginOperationDelegate(this.OnBegingetProjectWithSchemesById);
            }
            if ((this.onEndgetProjectWithSchemesByIdDelegate == null)) {
                this.onEndgetProjectWithSchemesByIdDelegate = new EndOperationDelegate(this.OnEndgetProjectWithSchemesById);
            }
            if ((this.ongetProjectWithSchemesByIdCompletedDelegate == null)) {
                this.ongetProjectWithSchemesByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProjectWithSchemesByIdCompleted);
            }
            base.InvokeAsync(this.onBegingetProjectWithSchemesByIdDelegate, null, this.onEndgetProjectWithSchemesByIdDelegate, this.ongetProjectWithSchemesByIdCompletedDelegate, userState);
        }
        
        public void getSecurityLevels() {
            base.Channel.getSecurityLevels();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSecurityLevels(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSecurityLevels(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetSecurityLevels(System.IAsyncResult result) {
            base.Channel.EndgetSecurityLevels(result);
        }
        
        private System.IAsyncResult OnBegingetSecurityLevels(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetSecurityLevels(callback, asyncState);
        }
        
        private object[] OnEndgetSecurityLevels(System.IAsyncResult result) {
            this.EndgetSecurityLevels(result);
            return null;
        }
        
        private void OngetSecurityLevelsCompleted(object state) {
            if ((this.getSecurityLevelsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSecurityLevelsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSecurityLevelsAsync() {
            this.getSecurityLevelsAsync(null);
        }
        
        public void getSecurityLevelsAsync(object userState) {
            if ((this.onBegingetSecurityLevelsDelegate == null)) {
                this.onBegingetSecurityLevelsDelegate = new BeginOperationDelegate(this.OnBegingetSecurityLevels);
            }
            if ((this.onEndgetSecurityLevelsDelegate == null)) {
                this.onEndgetSecurityLevelsDelegate = new EndOperationDelegate(this.OnEndgetSecurityLevels);
            }
            if ((this.ongetSecurityLevelsCompletedDelegate == null)) {
                this.ongetSecurityLevelsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSecurityLevelsCompleted);
            }
            base.InvokeAsync(this.onBegingetSecurityLevelsDelegate, null, this.onEndgetSecurityLevelsDelegate, this.ongetSecurityLevelsCompletedDelegate, userState);
        }
        
        public void getProjectAvatars() {
            base.Channel.getProjectAvatars();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProjectAvatars(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProjectAvatars(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetProjectAvatars(System.IAsyncResult result) {
            base.Channel.EndgetProjectAvatars(result);
        }
        
        private System.IAsyncResult OnBegingetProjectAvatars(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetProjectAvatars(callback, asyncState);
        }
        
        private object[] OnEndgetProjectAvatars(System.IAsyncResult result) {
            this.EndgetProjectAvatars(result);
            return null;
        }
        
        private void OngetProjectAvatarsCompleted(object state) {
            if ((this.getProjectAvatarsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProjectAvatarsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProjectAvatarsAsync() {
            this.getProjectAvatarsAsync(null);
        }
        
        public void getProjectAvatarsAsync(object userState) {
            if ((this.onBegingetProjectAvatarsDelegate == null)) {
                this.onBegingetProjectAvatarsDelegate = new BeginOperationDelegate(this.OnBegingetProjectAvatars);
            }
            if ((this.onEndgetProjectAvatarsDelegate == null)) {
                this.onEndgetProjectAvatarsDelegate = new EndOperationDelegate(this.OnEndgetProjectAvatars);
            }
            if ((this.ongetProjectAvatarsCompletedDelegate == null)) {
                this.ongetProjectAvatarsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProjectAvatarsCompleted);
            }
            base.InvokeAsync(this.onBegingetProjectAvatarsDelegate, null, this.onEndgetProjectAvatarsDelegate, this.ongetProjectAvatarsCompletedDelegate, userState);
        }
        
        public void setProjectAvatar() {
            base.Channel.setProjectAvatar();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsetProjectAvatar(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetProjectAvatar(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsetProjectAvatar(System.IAsyncResult result) {
            base.Channel.EndsetProjectAvatar(result);
        }
        
        private System.IAsyncResult OnBeginsetProjectAvatar(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginsetProjectAvatar(callback, asyncState);
        }
        
        private object[] OnEndsetProjectAvatar(System.IAsyncResult result) {
            this.EndsetProjectAvatar(result);
            return null;
        }
        
        private void OnsetProjectAvatarCompleted(object state) {
            if ((this.setProjectAvatarCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setProjectAvatarCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setProjectAvatarAsync() {
            this.setProjectAvatarAsync(null);
        }
        
        public void setProjectAvatarAsync(object userState) {
            if ((this.onBeginsetProjectAvatarDelegate == null)) {
                this.onBeginsetProjectAvatarDelegate = new BeginOperationDelegate(this.OnBeginsetProjectAvatar);
            }
            if ((this.onEndsetProjectAvatarDelegate == null)) {
                this.onEndsetProjectAvatarDelegate = new EndOperationDelegate(this.OnEndsetProjectAvatar);
            }
            if ((this.onsetProjectAvatarCompletedDelegate == null)) {
                this.onsetProjectAvatarCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetProjectAvatarCompleted);
            }
            base.InvokeAsync(this.onBeginsetProjectAvatarDelegate, null, this.onEndsetProjectAvatarDelegate, this.onsetProjectAvatarCompletedDelegate, userState);
        }
        
        public void getProjectAvatar() {
            base.Channel.getProjectAvatar();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProjectAvatar(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProjectAvatar(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetProjectAvatar(System.IAsyncResult result) {
            base.Channel.EndgetProjectAvatar(result);
        }
        
        private System.IAsyncResult OnBegingetProjectAvatar(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetProjectAvatar(callback, asyncState);
        }
        
        private object[] OnEndgetProjectAvatar(System.IAsyncResult result) {
            this.EndgetProjectAvatar(result);
            return null;
        }
        
        private void OngetProjectAvatarCompleted(object state) {
            if ((this.getProjectAvatarCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProjectAvatarCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProjectAvatarAsync() {
            this.getProjectAvatarAsync(null);
        }
        
        public void getProjectAvatarAsync(object userState) {
            if ((this.onBegingetProjectAvatarDelegate == null)) {
                this.onBegingetProjectAvatarDelegate = new BeginOperationDelegate(this.OnBegingetProjectAvatar);
            }
            if ((this.onEndgetProjectAvatarDelegate == null)) {
                this.onEndgetProjectAvatarDelegate = new EndOperationDelegate(this.OnEndgetProjectAvatar);
            }
            if ((this.ongetProjectAvatarCompletedDelegate == null)) {
                this.ongetProjectAvatarCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProjectAvatarCompleted);
            }
            base.InvokeAsync(this.onBegingetProjectAvatarDelegate, null, this.onEndgetProjectAvatarDelegate, this.ongetProjectAvatarCompletedDelegate, userState);
        }
        
        public void deleteProjectAvatar() {
            base.Channel.deleteProjectAvatar();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeleteProjectAvatar(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteProjectAvatar(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnddeleteProjectAvatar(System.IAsyncResult result) {
            base.Channel.EnddeleteProjectAvatar(result);
        }
        
        private System.IAsyncResult OnBegindeleteProjectAvatar(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegindeleteProjectAvatar(callback, asyncState);
        }
        
        private object[] OnEnddeleteProjectAvatar(System.IAsyncResult result) {
            this.EnddeleteProjectAvatar(result);
            return null;
        }
        
        private void OndeleteProjectAvatarCompleted(object state) {
            if ((this.deleteProjectAvatarCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteProjectAvatarCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteProjectAvatarAsync() {
            this.deleteProjectAvatarAsync(null);
        }
        
        public void deleteProjectAvatarAsync(object userState) {
            if ((this.onBegindeleteProjectAvatarDelegate == null)) {
                this.onBegindeleteProjectAvatarDelegate = new BeginOperationDelegate(this.OnBegindeleteProjectAvatar);
            }
            if ((this.onEnddeleteProjectAvatarDelegate == null)) {
                this.onEnddeleteProjectAvatarDelegate = new EndOperationDelegate(this.OnEnddeleteProjectAvatar);
            }
            if ((this.ondeleteProjectAvatarCompletedDelegate == null)) {
                this.ondeleteProjectAvatarCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteProjectAvatarCompleted);
            }
            base.InvokeAsync(this.onBegindeleteProjectAvatarDelegate, null, this.onEnddeleteProjectAvatarDelegate, this.ondeleteProjectAvatarCompletedDelegate, userState);
        }
        
        public void getNotificationSchemes() {
            base.Channel.getNotificationSchemes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetNotificationSchemes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetNotificationSchemes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetNotificationSchemes(System.IAsyncResult result) {
            base.Channel.EndgetNotificationSchemes(result);
        }
        
        private System.IAsyncResult OnBegingetNotificationSchemes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetNotificationSchemes(callback, asyncState);
        }
        
        private object[] OnEndgetNotificationSchemes(System.IAsyncResult result) {
            this.EndgetNotificationSchemes(result);
            return null;
        }
        
        private void OngetNotificationSchemesCompleted(object state) {
            if ((this.getNotificationSchemesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getNotificationSchemesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getNotificationSchemesAsync() {
            this.getNotificationSchemesAsync(null);
        }
        
        public void getNotificationSchemesAsync(object userState) {
            if ((this.onBegingetNotificationSchemesDelegate == null)) {
                this.onBegingetNotificationSchemesDelegate = new BeginOperationDelegate(this.OnBegingetNotificationSchemes);
            }
            if ((this.onEndgetNotificationSchemesDelegate == null)) {
                this.onEndgetNotificationSchemesDelegate = new EndOperationDelegate(this.OnEndgetNotificationSchemes);
            }
            if ((this.ongetNotificationSchemesCompletedDelegate == null)) {
                this.ongetNotificationSchemesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetNotificationSchemesCompleted);
            }
            base.InvokeAsync(this.onBegingetNotificationSchemesDelegate, null, this.onEndgetNotificationSchemesDelegate, this.ongetNotificationSchemesCompletedDelegate, userState);
        }
        
        public void getPermissionSchemes() {
            base.Channel.getPermissionSchemes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetPermissionSchemes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetPermissionSchemes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetPermissionSchemes(System.IAsyncResult result) {
            base.Channel.EndgetPermissionSchemes(result);
        }
        
        private System.IAsyncResult OnBegingetPermissionSchemes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetPermissionSchemes(callback, asyncState);
        }
        
        private object[] OnEndgetPermissionSchemes(System.IAsyncResult result) {
            this.EndgetPermissionSchemes(result);
            return null;
        }
        
        private void OngetPermissionSchemesCompleted(object state) {
            if ((this.getPermissionSchemesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPermissionSchemesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPermissionSchemesAsync() {
            this.getPermissionSchemesAsync(null);
        }
        
        public void getPermissionSchemesAsync(object userState) {
            if ((this.onBegingetPermissionSchemesDelegate == null)) {
                this.onBegingetPermissionSchemesDelegate = new BeginOperationDelegate(this.OnBegingetPermissionSchemes);
            }
            if ((this.onEndgetPermissionSchemesDelegate == null)) {
                this.onEndgetPermissionSchemesDelegate = new EndOperationDelegate(this.OnEndgetPermissionSchemes);
            }
            if ((this.ongetPermissionSchemesCompletedDelegate == null)) {
                this.ongetPermissionSchemesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPermissionSchemesCompleted);
            }
            base.InvokeAsync(this.onBegingetPermissionSchemesDelegate, null, this.onEndgetPermissionSchemesDelegate, this.ongetPermissionSchemesCompletedDelegate, userState);
        }
        
        public void createPermissionScheme() {
            base.Channel.createPermissionScheme();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincreatePermissionScheme(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreatePermissionScheme(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndcreatePermissionScheme(System.IAsyncResult result) {
            base.Channel.EndcreatePermissionScheme(result);
        }
        
        private System.IAsyncResult OnBegincreatePermissionScheme(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegincreatePermissionScheme(callback, asyncState);
        }
        
        private object[] OnEndcreatePermissionScheme(System.IAsyncResult result) {
            this.EndcreatePermissionScheme(result);
            return null;
        }
        
        private void OncreatePermissionSchemeCompleted(object state) {
            if ((this.createPermissionSchemeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createPermissionSchemeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createPermissionSchemeAsync() {
            this.createPermissionSchemeAsync(null);
        }
        
        public void createPermissionSchemeAsync(object userState) {
            if ((this.onBegincreatePermissionSchemeDelegate == null)) {
                this.onBegincreatePermissionSchemeDelegate = new BeginOperationDelegate(this.OnBegincreatePermissionScheme);
            }
            if ((this.onEndcreatePermissionSchemeDelegate == null)) {
                this.onEndcreatePermissionSchemeDelegate = new EndOperationDelegate(this.OnEndcreatePermissionScheme);
            }
            if ((this.oncreatePermissionSchemeCompletedDelegate == null)) {
                this.oncreatePermissionSchemeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreatePermissionSchemeCompleted);
            }
            base.InvokeAsync(this.onBegincreatePermissionSchemeDelegate, null, this.onEndcreatePermissionSchemeDelegate, this.oncreatePermissionSchemeCompletedDelegate, userState);
        }
        
        public void deletePermissionScheme() {
            base.Channel.deletePermissionScheme();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeletePermissionScheme(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeletePermissionScheme(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnddeletePermissionScheme(System.IAsyncResult result) {
            base.Channel.EnddeletePermissionScheme(result);
        }
        
        private System.IAsyncResult OnBegindeletePermissionScheme(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegindeletePermissionScheme(callback, asyncState);
        }
        
        private object[] OnEnddeletePermissionScheme(System.IAsyncResult result) {
            this.EnddeletePermissionScheme(result);
            return null;
        }
        
        private void OndeletePermissionSchemeCompleted(object state) {
            if ((this.deletePermissionSchemeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deletePermissionSchemeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deletePermissionSchemeAsync() {
            this.deletePermissionSchemeAsync(null);
        }
        
        public void deletePermissionSchemeAsync(object userState) {
            if ((this.onBegindeletePermissionSchemeDelegate == null)) {
                this.onBegindeletePermissionSchemeDelegate = new BeginOperationDelegate(this.OnBegindeletePermissionScheme);
            }
            if ((this.onEnddeletePermissionSchemeDelegate == null)) {
                this.onEnddeletePermissionSchemeDelegate = new EndOperationDelegate(this.OnEnddeletePermissionScheme);
            }
            if ((this.ondeletePermissionSchemeCompletedDelegate == null)) {
                this.ondeletePermissionSchemeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeletePermissionSchemeCompleted);
            }
            base.InvokeAsync(this.onBegindeletePermissionSchemeDelegate, null, this.onEnddeletePermissionSchemeDelegate, this.ondeletePermissionSchemeCompletedDelegate, userState);
        }
        
        public void addPermissionTo() {
            base.Channel.addPermissionTo();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddPermissionTo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddPermissionTo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndaddPermissionTo(System.IAsyncResult result) {
            base.Channel.EndaddPermissionTo(result);
        }
        
        private System.IAsyncResult OnBeginaddPermissionTo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginaddPermissionTo(callback, asyncState);
        }
        
        private object[] OnEndaddPermissionTo(System.IAsyncResult result) {
            this.EndaddPermissionTo(result);
            return null;
        }
        
        private void OnaddPermissionToCompleted(object state) {
            if ((this.addPermissionToCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addPermissionToCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addPermissionToAsync() {
            this.addPermissionToAsync(null);
        }
        
        public void addPermissionToAsync(object userState) {
            if ((this.onBeginaddPermissionToDelegate == null)) {
                this.onBeginaddPermissionToDelegate = new BeginOperationDelegate(this.OnBeginaddPermissionTo);
            }
            if ((this.onEndaddPermissionToDelegate == null)) {
                this.onEndaddPermissionToDelegate = new EndOperationDelegate(this.OnEndaddPermissionTo);
            }
            if ((this.onaddPermissionToCompletedDelegate == null)) {
                this.onaddPermissionToCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddPermissionToCompleted);
            }
            base.InvokeAsync(this.onBeginaddPermissionToDelegate, null, this.onEndaddPermissionToDelegate, this.onaddPermissionToCompletedDelegate, userState);
        }
        
        public void deletePermissionFrom() {
            base.Channel.deletePermissionFrom();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeletePermissionFrom(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeletePermissionFrom(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnddeletePermissionFrom(System.IAsyncResult result) {
            base.Channel.EnddeletePermissionFrom(result);
        }
        
        private System.IAsyncResult OnBegindeletePermissionFrom(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegindeletePermissionFrom(callback, asyncState);
        }
        
        private object[] OnEnddeletePermissionFrom(System.IAsyncResult result) {
            this.EnddeletePermissionFrom(result);
            return null;
        }
        
        private void OndeletePermissionFromCompleted(object state) {
            if ((this.deletePermissionFromCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deletePermissionFromCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deletePermissionFromAsync() {
            this.deletePermissionFromAsync(null);
        }
        
        public void deletePermissionFromAsync(object userState) {
            if ((this.onBegindeletePermissionFromDelegate == null)) {
                this.onBegindeletePermissionFromDelegate = new BeginOperationDelegate(this.OnBegindeletePermissionFrom);
            }
            if ((this.onEnddeletePermissionFromDelegate == null)) {
                this.onEnddeletePermissionFromDelegate = new EndOperationDelegate(this.OnEnddeletePermissionFrom);
            }
            if ((this.ondeletePermissionFromCompletedDelegate == null)) {
                this.ondeletePermissionFromCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeletePermissionFromCompleted);
            }
            base.InvokeAsync(this.onBegindeletePermissionFromDelegate, null, this.onEnddeletePermissionFromDelegate, this.ondeletePermissionFromCompletedDelegate, userState);
        }
        
        public void getAllPermissions() {
            base.Channel.getAllPermissions();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAllPermissions(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAllPermissions(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetAllPermissions(System.IAsyncResult result) {
            base.Channel.EndgetAllPermissions(result);
        }
        
        private System.IAsyncResult OnBegingetAllPermissions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetAllPermissions(callback, asyncState);
        }
        
        private object[] OnEndgetAllPermissions(System.IAsyncResult result) {
            this.EndgetAllPermissions(result);
            return null;
        }
        
        private void OngetAllPermissionsCompleted(object state) {
            if ((this.getAllPermissionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAllPermissionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAllPermissionsAsync() {
            this.getAllPermissionsAsync(null);
        }
        
        public void getAllPermissionsAsync(object userState) {
            if ((this.onBegingetAllPermissionsDelegate == null)) {
                this.onBegingetAllPermissionsDelegate = new BeginOperationDelegate(this.OnBegingetAllPermissions);
            }
            if ((this.onEndgetAllPermissionsDelegate == null)) {
                this.onEndgetAllPermissionsDelegate = new EndOperationDelegate(this.OnEndgetAllPermissions);
            }
            if ((this.ongetAllPermissionsCompletedDelegate == null)) {
                this.ongetAllPermissionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAllPermissionsCompleted);
            }
            base.InvokeAsync(this.onBegingetAllPermissionsDelegate, null, this.onEndgetAllPermissionsDelegate, this.ongetAllPermissionsCompletedDelegate, userState);
        }
        
        public void createIssueWithSecurityLevel() {
            base.Channel.createIssueWithSecurityLevel();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincreateIssueWithSecurityLevel(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateIssueWithSecurityLevel(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndcreateIssueWithSecurityLevel(System.IAsyncResult result) {
            base.Channel.EndcreateIssueWithSecurityLevel(result);
        }
        
        private System.IAsyncResult OnBegincreateIssueWithSecurityLevel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegincreateIssueWithSecurityLevel(callback, asyncState);
        }
        
        private object[] OnEndcreateIssueWithSecurityLevel(System.IAsyncResult result) {
            this.EndcreateIssueWithSecurityLevel(result);
            return null;
        }
        
        private void OncreateIssueWithSecurityLevelCompleted(object state) {
            if ((this.createIssueWithSecurityLevelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createIssueWithSecurityLevelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createIssueWithSecurityLevelAsync() {
            this.createIssueWithSecurityLevelAsync(null);
        }
        
        public void createIssueWithSecurityLevelAsync(object userState) {
            if ((this.onBegincreateIssueWithSecurityLevelDelegate == null)) {
                this.onBegincreateIssueWithSecurityLevelDelegate = new BeginOperationDelegate(this.OnBegincreateIssueWithSecurityLevel);
            }
            if ((this.onEndcreateIssueWithSecurityLevelDelegate == null)) {
                this.onEndcreateIssueWithSecurityLevelDelegate = new EndOperationDelegate(this.OnEndcreateIssueWithSecurityLevel);
            }
            if ((this.oncreateIssueWithSecurityLevelCompletedDelegate == null)) {
                this.oncreateIssueWithSecurityLevelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateIssueWithSecurityLevelCompleted);
            }
            base.InvokeAsync(this.onBegincreateIssueWithSecurityLevelDelegate, null, this.onEndcreateIssueWithSecurityLevelDelegate, this.oncreateIssueWithSecurityLevelCompletedDelegate, userState);
        }
        
        public void hasPermissionToEditComment() {
            base.Channel.hasPermissionToEditComment();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginhasPermissionToEditComment(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginhasPermissionToEditComment(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndhasPermissionToEditComment(System.IAsyncResult result) {
            base.Channel.EndhasPermissionToEditComment(result);
        }
        
        private System.IAsyncResult OnBeginhasPermissionToEditComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginhasPermissionToEditComment(callback, asyncState);
        }
        
        private object[] OnEndhasPermissionToEditComment(System.IAsyncResult result) {
            this.EndhasPermissionToEditComment(result);
            return null;
        }
        
        private void OnhasPermissionToEditCommentCompleted(object state) {
            if ((this.hasPermissionToEditCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.hasPermissionToEditCommentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void hasPermissionToEditCommentAsync() {
            this.hasPermissionToEditCommentAsync(null);
        }
        
        public void hasPermissionToEditCommentAsync(object userState) {
            if ((this.onBeginhasPermissionToEditCommentDelegate == null)) {
                this.onBeginhasPermissionToEditCommentDelegate = new BeginOperationDelegate(this.OnBeginhasPermissionToEditComment);
            }
            if ((this.onEndhasPermissionToEditCommentDelegate == null)) {
                this.onEndhasPermissionToEditCommentDelegate = new EndOperationDelegate(this.OnEndhasPermissionToEditComment);
            }
            if ((this.onhasPermissionToEditCommentCompletedDelegate == null)) {
                this.onhasPermissionToEditCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnhasPermissionToEditCommentCompleted);
            }
            base.InvokeAsync(this.onBeginhasPermissionToEditCommentDelegate, null, this.onEndhasPermissionToEditCommentDelegate, this.onhasPermissionToEditCommentCompletedDelegate, userState);
        }
        
        public void getFieldsForAction() {
            base.Channel.getFieldsForAction();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetFieldsForAction(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFieldsForAction(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetFieldsForAction(System.IAsyncResult result) {
            base.Channel.EndgetFieldsForAction(result);
        }
        
        private System.IAsyncResult OnBegingetFieldsForAction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetFieldsForAction(callback, asyncState);
        }
        
        private object[] OnEndgetFieldsForAction(System.IAsyncResult result) {
            this.EndgetFieldsForAction(result);
            return null;
        }
        
        private void OngetFieldsForActionCompleted(object state) {
            if ((this.getFieldsForActionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFieldsForActionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFieldsForActionAsync() {
            this.getFieldsForActionAsync(null);
        }
        
        public void getFieldsForActionAsync(object userState) {
            if ((this.onBegingetFieldsForActionDelegate == null)) {
                this.onBegingetFieldsForActionDelegate = new BeginOperationDelegate(this.OnBegingetFieldsForAction);
            }
            if ((this.onEndgetFieldsForActionDelegate == null)) {
                this.onEndgetFieldsForActionDelegate = new EndOperationDelegate(this.OnEndgetFieldsForAction);
            }
            if ((this.ongetFieldsForActionCompletedDelegate == null)) {
                this.ongetFieldsForActionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFieldsForActionCompleted);
            }
            base.InvokeAsync(this.onBegingetFieldsForActionDelegate, null, this.onEndgetFieldsForActionDelegate, this.ongetFieldsForActionCompletedDelegate, userState);
        }
        
        public void progressWorkflowAction() {
            base.Channel.progressWorkflowAction();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginprogressWorkflowAction(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginprogressWorkflowAction(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndprogressWorkflowAction(System.IAsyncResult result) {
            base.Channel.EndprogressWorkflowAction(result);
        }
        
        private System.IAsyncResult OnBeginprogressWorkflowAction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginprogressWorkflowAction(callback, asyncState);
        }
        
        private object[] OnEndprogressWorkflowAction(System.IAsyncResult result) {
            this.EndprogressWorkflowAction(result);
            return null;
        }
        
        private void OnprogressWorkflowActionCompleted(object state) {
            if ((this.progressWorkflowActionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.progressWorkflowActionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void progressWorkflowActionAsync() {
            this.progressWorkflowActionAsync(null);
        }
        
        public void progressWorkflowActionAsync(object userState) {
            if ((this.onBeginprogressWorkflowActionDelegate == null)) {
                this.onBeginprogressWorkflowActionDelegate = new BeginOperationDelegate(this.OnBeginprogressWorkflowAction);
            }
            if ((this.onEndprogressWorkflowActionDelegate == null)) {
                this.onEndprogressWorkflowActionDelegate = new EndOperationDelegate(this.OnEndprogressWorkflowAction);
            }
            if ((this.onprogressWorkflowActionCompletedDelegate == null)) {
                this.onprogressWorkflowActionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnprogressWorkflowActionCompleted);
            }
            base.InvokeAsync(this.onBeginprogressWorkflowActionDelegate, null, this.onEndprogressWorkflowActionDelegate, this.onprogressWorkflowActionCompletedDelegate, userState);
        }
        
        public void getIssueById() {
            base.Channel.getIssueById();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetIssueById(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetIssueById(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetIssueById(System.IAsyncResult result) {
            base.Channel.EndgetIssueById(result);
        }
        
        private System.IAsyncResult OnBegingetIssueById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetIssueById(callback, asyncState);
        }
        
        private object[] OnEndgetIssueById(System.IAsyncResult result) {
            this.EndgetIssueById(result);
            return null;
        }
        
        private void OngetIssueByIdCompleted(object state) {
            if ((this.getIssueByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getIssueByIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getIssueByIdAsync() {
            this.getIssueByIdAsync(null);
        }
        
        public void getIssueByIdAsync(object userState) {
            if ((this.onBegingetIssueByIdDelegate == null)) {
                this.onBegingetIssueByIdDelegate = new BeginOperationDelegate(this.OnBegingetIssueById);
            }
            if ((this.onEndgetIssueByIdDelegate == null)) {
                this.onEndgetIssueByIdDelegate = new EndOperationDelegate(this.OnEndgetIssueById);
            }
            if ((this.ongetIssueByIdCompletedDelegate == null)) {
                this.ongetIssueByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetIssueByIdCompleted);
            }
            base.InvokeAsync(this.onBegingetIssueByIdDelegate, null, this.onEndgetIssueByIdDelegate, this.ongetIssueByIdCompletedDelegate, userState);
        }
        
        public void addAttachmentsToIssue() {
            base.Channel.addAttachmentsToIssue();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddAttachmentsToIssue(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddAttachmentsToIssue(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndaddAttachmentsToIssue(System.IAsyncResult result) {
            base.Channel.EndaddAttachmentsToIssue(result);
        }
        
        private System.IAsyncResult OnBeginaddAttachmentsToIssue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginaddAttachmentsToIssue(callback, asyncState);
        }
        
        private object[] OnEndaddAttachmentsToIssue(System.IAsyncResult result) {
            this.EndaddAttachmentsToIssue(result);
            return null;
        }
        
        private void OnaddAttachmentsToIssueCompleted(object state) {
            if ((this.addAttachmentsToIssueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addAttachmentsToIssueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addAttachmentsToIssueAsync() {
            this.addAttachmentsToIssueAsync(null);
        }
        
        public void addAttachmentsToIssueAsync(object userState) {
            if ((this.onBeginaddAttachmentsToIssueDelegate == null)) {
                this.onBeginaddAttachmentsToIssueDelegate = new BeginOperationDelegate(this.OnBeginaddAttachmentsToIssue);
            }
            if ((this.onEndaddAttachmentsToIssueDelegate == null)) {
                this.onEndaddAttachmentsToIssueDelegate = new EndOperationDelegate(this.OnEndaddAttachmentsToIssue);
            }
            if ((this.onaddAttachmentsToIssueCompletedDelegate == null)) {
                this.onaddAttachmentsToIssueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddAttachmentsToIssueCompleted);
            }
            base.InvokeAsync(this.onBeginaddAttachmentsToIssueDelegate, null, this.onEndaddAttachmentsToIssueDelegate, this.onaddAttachmentsToIssueCompletedDelegate, userState);
        }
        
        public void getAttachmentsFromIssue() {
            base.Channel.getAttachmentsFromIssue();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAttachmentsFromIssue(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAttachmentsFromIssue(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetAttachmentsFromIssue(System.IAsyncResult result) {
            base.Channel.EndgetAttachmentsFromIssue(result);
        }
        
        private System.IAsyncResult OnBegingetAttachmentsFromIssue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetAttachmentsFromIssue(callback, asyncState);
        }
        
        private object[] OnEndgetAttachmentsFromIssue(System.IAsyncResult result) {
            this.EndgetAttachmentsFromIssue(result);
            return null;
        }
        
        private void OngetAttachmentsFromIssueCompleted(object state) {
            if ((this.getAttachmentsFromIssueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAttachmentsFromIssueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAttachmentsFromIssueAsync() {
            this.getAttachmentsFromIssueAsync(null);
        }
        
        public void getAttachmentsFromIssueAsync(object userState) {
            if ((this.onBegingetAttachmentsFromIssueDelegate == null)) {
                this.onBegingetAttachmentsFromIssueDelegate = new BeginOperationDelegate(this.OnBegingetAttachmentsFromIssue);
            }
            if ((this.onEndgetAttachmentsFromIssueDelegate == null)) {
                this.onEndgetAttachmentsFromIssueDelegate = new EndOperationDelegate(this.OnEndgetAttachmentsFromIssue);
            }
            if ((this.ongetAttachmentsFromIssueCompletedDelegate == null)) {
                this.ongetAttachmentsFromIssueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAttachmentsFromIssueCompleted);
            }
            base.InvokeAsync(this.onBegingetAttachmentsFromIssueDelegate, null, this.onEndgetAttachmentsFromIssueDelegate, this.ongetAttachmentsFromIssueCompletedDelegate, userState);
        }
        
        public void addWorklogWithNewRemainingEstimate() {
            base.Channel.addWorklogWithNewRemainingEstimate();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddWorklogWithNewRemainingEstimate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddWorklogWithNewRemainingEstimate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndaddWorklogWithNewRemainingEstimate(System.IAsyncResult result) {
            base.Channel.EndaddWorklogWithNewRemainingEstimate(result);
        }
        
        private System.IAsyncResult OnBeginaddWorklogWithNewRemainingEstimate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginaddWorklogWithNewRemainingEstimate(callback, asyncState);
        }
        
        private object[] OnEndaddWorklogWithNewRemainingEstimate(System.IAsyncResult result) {
            this.EndaddWorklogWithNewRemainingEstimate(result);
            return null;
        }
        
        private void OnaddWorklogWithNewRemainingEstimateCompleted(object state) {
            if ((this.addWorklogWithNewRemainingEstimateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addWorklogWithNewRemainingEstimateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addWorklogWithNewRemainingEstimateAsync() {
            this.addWorklogWithNewRemainingEstimateAsync(null);
        }
        
        public void addWorklogWithNewRemainingEstimateAsync(object userState) {
            if ((this.onBeginaddWorklogWithNewRemainingEstimateDelegate == null)) {
                this.onBeginaddWorklogWithNewRemainingEstimateDelegate = new BeginOperationDelegate(this.OnBeginaddWorklogWithNewRemainingEstimate);
            }
            if ((this.onEndaddWorklogWithNewRemainingEstimateDelegate == null)) {
                this.onEndaddWorklogWithNewRemainingEstimateDelegate = new EndOperationDelegate(this.OnEndaddWorklogWithNewRemainingEstimate);
            }
            if ((this.onaddWorklogWithNewRemainingEstimateCompletedDelegate == null)) {
                this.onaddWorklogWithNewRemainingEstimateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddWorklogWithNewRemainingEstimateCompleted);
            }
            base.InvokeAsync(this.onBeginaddWorklogWithNewRemainingEstimateDelegate, null, this.onEndaddWorklogWithNewRemainingEstimateDelegate, this.onaddWorklogWithNewRemainingEstimateCompletedDelegate, userState);
        }
        
        public void addWorklogAndAutoAdjustRemainingEstimate() {
            base.Channel.addWorklogAndAutoAdjustRemainingEstimate();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddWorklogAndAutoAdjustRemainingEstimate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddWorklogAndAutoAdjustRemainingEstimate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndaddWorklogAndAutoAdjustRemainingEstimate(System.IAsyncResult result) {
            base.Channel.EndaddWorklogAndAutoAdjustRemainingEstimate(result);
        }
        
        private System.IAsyncResult OnBeginaddWorklogAndAutoAdjustRemainingEstimate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginaddWorklogAndAutoAdjustRemainingEstimate(callback, asyncState);
        }
        
        private object[] OnEndaddWorklogAndAutoAdjustRemainingEstimate(System.IAsyncResult result) {
            this.EndaddWorklogAndAutoAdjustRemainingEstimate(result);
            return null;
        }
        
        private void OnaddWorklogAndAutoAdjustRemainingEstimateCompleted(object state) {
            if ((this.addWorklogAndAutoAdjustRemainingEstimateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addWorklogAndAutoAdjustRemainingEstimateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addWorklogAndAutoAdjustRemainingEstimateAsync() {
            this.addWorklogAndAutoAdjustRemainingEstimateAsync(null);
        }
        
        public void addWorklogAndAutoAdjustRemainingEstimateAsync(object userState) {
            if ((this.onBeginaddWorklogAndAutoAdjustRemainingEstimateDelegate == null)) {
                this.onBeginaddWorklogAndAutoAdjustRemainingEstimateDelegate = new BeginOperationDelegate(this.OnBeginaddWorklogAndAutoAdjustRemainingEstimate);
            }
            if ((this.onEndaddWorklogAndAutoAdjustRemainingEstimateDelegate == null)) {
                this.onEndaddWorklogAndAutoAdjustRemainingEstimateDelegate = new EndOperationDelegate(this.OnEndaddWorklogAndAutoAdjustRemainingEstimate);
            }
            if ((this.onaddWorklogAndAutoAdjustRemainingEstimateCompletedDelegate == null)) {
                this.onaddWorklogAndAutoAdjustRemainingEstimateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddWorklogAndAutoAdjustRemainingEstimateCompleted);
            }
            base.InvokeAsync(this.onBeginaddWorklogAndAutoAdjustRemainingEstimateDelegate, null, this.onEndaddWorklogAndAutoAdjustRemainingEstimateDelegate, this.onaddWorklogAndAutoAdjustRemainingEstimateCompletedDelegate, userState);
        }
        
        public void addWorklogAndRetainRemainingEstimate() {
            base.Channel.addWorklogAndRetainRemainingEstimate();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddWorklogAndRetainRemainingEstimate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddWorklogAndRetainRemainingEstimate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndaddWorklogAndRetainRemainingEstimate(System.IAsyncResult result) {
            base.Channel.EndaddWorklogAndRetainRemainingEstimate(result);
        }
        
        private System.IAsyncResult OnBeginaddWorklogAndRetainRemainingEstimate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginaddWorklogAndRetainRemainingEstimate(callback, asyncState);
        }
        
        private object[] OnEndaddWorklogAndRetainRemainingEstimate(System.IAsyncResult result) {
            this.EndaddWorklogAndRetainRemainingEstimate(result);
            return null;
        }
        
        private void OnaddWorklogAndRetainRemainingEstimateCompleted(object state) {
            if ((this.addWorklogAndRetainRemainingEstimateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addWorklogAndRetainRemainingEstimateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addWorklogAndRetainRemainingEstimateAsync() {
            this.addWorklogAndRetainRemainingEstimateAsync(null);
        }
        
        public void addWorklogAndRetainRemainingEstimateAsync(object userState) {
            if ((this.onBeginaddWorklogAndRetainRemainingEstimateDelegate == null)) {
                this.onBeginaddWorklogAndRetainRemainingEstimateDelegate = new BeginOperationDelegate(this.OnBeginaddWorklogAndRetainRemainingEstimate);
            }
            if ((this.onEndaddWorklogAndRetainRemainingEstimateDelegate == null)) {
                this.onEndaddWorklogAndRetainRemainingEstimateDelegate = new EndOperationDelegate(this.OnEndaddWorklogAndRetainRemainingEstimate);
            }
            if ((this.onaddWorklogAndRetainRemainingEstimateCompletedDelegate == null)) {
                this.onaddWorklogAndRetainRemainingEstimateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddWorklogAndRetainRemainingEstimateCompleted);
            }
            base.InvokeAsync(this.onBeginaddWorklogAndRetainRemainingEstimateDelegate, null, this.onEndaddWorklogAndRetainRemainingEstimateDelegate, this.onaddWorklogAndRetainRemainingEstimateCompletedDelegate, userState);
        }
        
        public void deleteWorklogAndAutoAdjustRemainingEstimate() {
            base.Channel.deleteWorklogAndAutoAdjustRemainingEstimate();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeleteWorklogAndAutoAdjustRemainingEstimate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteWorklogAndAutoAdjustRemainingEstimate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnddeleteWorklogAndAutoAdjustRemainingEstimate(System.IAsyncResult result) {
            base.Channel.EnddeleteWorklogAndAutoAdjustRemainingEstimate(result);
        }
        
        private System.IAsyncResult OnBegindeleteWorklogAndAutoAdjustRemainingEstimate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegindeleteWorklogAndAutoAdjustRemainingEstimate(callback, asyncState);
        }
        
        private object[] OnEnddeleteWorklogAndAutoAdjustRemainingEstimate(System.IAsyncResult result) {
            this.EnddeleteWorklogAndAutoAdjustRemainingEstimate(result);
            return null;
        }
        
        private void OndeleteWorklogAndAutoAdjustRemainingEstimateCompleted(object state) {
            if ((this.deleteWorklogAndAutoAdjustRemainingEstimateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteWorklogAndAutoAdjustRemainingEstimateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteWorklogAndAutoAdjustRemainingEstimateAsync() {
            this.deleteWorklogAndAutoAdjustRemainingEstimateAsync(null);
        }
        
        public void deleteWorklogAndAutoAdjustRemainingEstimateAsync(object userState) {
            if ((this.onBegindeleteWorklogAndAutoAdjustRemainingEstimateDelegate == null)) {
                this.onBegindeleteWorklogAndAutoAdjustRemainingEstimateDelegate = new BeginOperationDelegate(this.OnBegindeleteWorklogAndAutoAdjustRemainingEstimate);
            }
            if ((this.onEnddeleteWorklogAndAutoAdjustRemainingEstimateDelegate == null)) {
                this.onEnddeleteWorklogAndAutoAdjustRemainingEstimateDelegate = new EndOperationDelegate(this.OnEnddeleteWorklogAndAutoAdjustRemainingEstimate);
            }
            if ((this.ondeleteWorklogAndAutoAdjustRemainingEstimateCompletedDelegate == null)) {
                this.ondeleteWorklogAndAutoAdjustRemainingEstimateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteWorklogAndAutoAdjustRemainingEstimateCompleted);
            }
            base.InvokeAsync(this.onBegindeleteWorklogAndAutoAdjustRemainingEstimateDelegate, null, this.onEnddeleteWorklogAndAutoAdjustRemainingEstimateDelegate, this.ondeleteWorklogAndAutoAdjustRemainingEstimateCompletedDelegate, userState);
        }
        
        public void deleteWorklogAndRetainRemainingEstimate() {
            base.Channel.deleteWorklogAndRetainRemainingEstimate();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeleteWorklogAndRetainRemainingEstimate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteWorklogAndRetainRemainingEstimate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnddeleteWorklogAndRetainRemainingEstimate(System.IAsyncResult result) {
            base.Channel.EnddeleteWorklogAndRetainRemainingEstimate(result);
        }
        
        private System.IAsyncResult OnBegindeleteWorklogAndRetainRemainingEstimate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegindeleteWorklogAndRetainRemainingEstimate(callback, asyncState);
        }
        
        private object[] OnEnddeleteWorklogAndRetainRemainingEstimate(System.IAsyncResult result) {
            this.EnddeleteWorklogAndRetainRemainingEstimate(result);
            return null;
        }
        
        private void OndeleteWorklogAndRetainRemainingEstimateCompleted(object state) {
            if ((this.deleteWorklogAndRetainRemainingEstimateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteWorklogAndRetainRemainingEstimateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteWorklogAndRetainRemainingEstimateAsync() {
            this.deleteWorklogAndRetainRemainingEstimateAsync(null);
        }
        
        public void deleteWorklogAndRetainRemainingEstimateAsync(object userState) {
            if ((this.onBegindeleteWorklogAndRetainRemainingEstimateDelegate == null)) {
                this.onBegindeleteWorklogAndRetainRemainingEstimateDelegate = new BeginOperationDelegate(this.OnBegindeleteWorklogAndRetainRemainingEstimate);
            }
            if ((this.onEnddeleteWorklogAndRetainRemainingEstimateDelegate == null)) {
                this.onEnddeleteWorklogAndRetainRemainingEstimateDelegate = new EndOperationDelegate(this.OnEnddeleteWorklogAndRetainRemainingEstimate);
            }
            if ((this.ondeleteWorklogAndRetainRemainingEstimateCompletedDelegate == null)) {
                this.ondeleteWorklogAndRetainRemainingEstimateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteWorklogAndRetainRemainingEstimateCompleted);
            }
            base.InvokeAsync(this.onBegindeleteWorklogAndRetainRemainingEstimateDelegate, null, this.onEnddeleteWorklogAndRetainRemainingEstimateDelegate, this.ondeleteWorklogAndRetainRemainingEstimateCompletedDelegate, userState);
        }
        
        public void deleteWorklogWithNewRemainingEstimate() {
            base.Channel.deleteWorklogWithNewRemainingEstimate();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeleteWorklogWithNewRemainingEstimate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteWorklogWithNewRemainingEstimate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnddeleteWorklogWithNewRemainingEstimate(System.IAsyncResult result) {
            base.Channel.EnddeleteWorklogWithNewRemainingEstimate(result);
        }
        
        private System.IAsyncResult OnBegindeleteWorklogWithNewRemainingEstimate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegindeleteWorklogWithNewRemainingEstimate(callback, asyncState);
        }
        
        private object[] OnEnddeleteWorklogWithNewRemainingEstimate(System.IAsyncResult result) {
            this.EnddeleteWorklogWithNewRemainingEstimate(result);
            return null;
        }
        
        private void OndeleteWorklogWithNewRemainingEstimateCompleted(object state) {
            if ((this.deleteWorklogWithNewRemainingEstimateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteWorklogWithNewRemainingEstimateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteWorklogWithNewRemainingEstimateAsync() {
            this.deleteWorklogWithNewRemainingEstimateAsync(null);
        }
        
        public void deleteWorklogWithNewRemainingEstimateAsync(object userState) {
            if ((this.onBegindeleteWorklogWithNewRemainingEstimateDelegate == null)) {
                this.onBegindeleteWorklogWithNewRemainingEstimateDelegate = new BeginOperationDelegate(this.OnBegindeleteWorklogWithNewRemainingEstimate);
            }
            if ((this.onEnddeleteWorklogWithNewRemainingEstimateDelegate == null)) {
                this.onEnddeleteWorklogWithNewRemainingEstimateDelegate = new EndOperationDelegate(this.OnEnddeleteWorklogWithNewRemainingEstimate);
            }
            if ((this.ondeleteWorklogWithNewRemainingEstimateCompletedDelegate == null)) {
                this.ondeleteWorklogWithNewRemainingEstimateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteWorklogWithNewRemainingEstimateCompleted);
            }
            base.InvokeAsync(this.onBegindeleteWorklogWithNewRemainingEstimateDelegate, null, this.onEnddeleteWorklogWithNewRemainingEstimateDelegate, this.ondeleteWorklogWithNewRemainingEstimateCompletedDelegate, userState);
        }
        
        public void updateWorklogAndAutoAdjustRemainingEstimate() {
            base.Channel.updateWorklogAndAutoAdjustRemainingEstimate();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateWorklogAndAutoAdjustRemainingEstimate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateWorklogAndAutoAdjustRemainingEstimate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateWorklogAndAutoAdjustRemainingEstimate(System.IAsyncResult result) {
            base.Channel.EndupdateWorklogAndAutoAdjustRemainingEstimate(result);
        }
        
        private System.IAsyncResult OnBeginupdateWorklogAndAutoAdjustRemainingEstimate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginupdateWorklogAndAutoAdjustRemainingEstimate(callback, asyncState);
        }
        
        private object[] OnEndupdateWorklogAndAutoAdjustRemainingEstimate(System.IAsyncResult result) {
            this.EndupdateWorklogAndAutoAdjustRemainingEstimate(result);
            return null;
        }
        
        private void OnupdateWorklogAndAutoAdjustRemainingEstimateCompleted(object state) {
            if ((this.updateWorklogAndAutoAdjustRemainingEstimateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateWorklogAndAutoAdjustRemainingEstimateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateWorklogAndAutoAdjustRemainingEstimateAsync() {
            this.updateWorklogAndAutoAdjustRemainingEstimateAsync(null);
        }
        
        public void updateWorklogAndAutoAdjustRemainingEstimateAsync(object userState) {
            if ((this.onBeginupdateWorklogAndAutoAdjustRemainingEstimateDelegate == null)) {
                this.onBeginupdateWorklogAndAutoAdjustRemainingEstimateDelegate = new BeginOperationDelegate(this.OnBeginupdateWorklogAndAutoAdjustRemainingEstimate);
            }
            if ((this.onEndupdateWorklogAndAutoAdjustRemainingEstimateDelegate == null)) {
                this.onEndupdateWorklogAndAutoAdjustRemainingEstimateDelegate = new EndOperationDelegate(this.OnEndupdateWorklogAndAutoAdjustRemainingEstimate);
            }
            if ((this.onupdateWorklogAndAutoAdjustRemainingEstimateCompletedDelegate == null)) {
                this.onupdateWorklogAndAutoAdjustRemainingEstimateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateWorklogAndAutoAdjustRemainingEstimateCompleted);
            }
            base.InvokeAsync(this.onBeginupdateWorklogAndAutoAdjustRemainingEstimateDelegate, null, this.onEndupdateWorklogAndAutoAdjustRemainingEstimateDelegate, this.onupdateWorklogAndAutoAdjustRemainingEstimateCompletedDelegate, userState);
        }
        
        public void updateWorklogAndRetainRemainingEstimate() {
            base.Channel.updateWorklogAndRetainRemainingEstimate();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateWorklogAndRetainRemainingEstimate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateWorklogAndRetainRemainingEstimate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateWorklogAndRetainRemainingEstimate(System.IAsyncResult result) {
            base.Channel.EndupdateWorklogAndRetainRemainingEstimate(result);
        }
        
        private System.IAsyncResult OnBeginupdateWorklogAndRetainRemainingEstimate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginupdateWorklogAndRetainRemainingEstimate(callback, asyncState);
        }
        
        private object[] OnEndupdateWorklogAndRetainRemainingEstimate(System.IAsyncResult result) {
            this.EndupdateWorklogAndRetainRemainingEstimate(result);
            return null;
        }
        
        private void OnupdateWorklogAndRetainRemainingEstimateCompleted(object state) {
            if ((this.updateWorklogAndRetainRemainingEstimateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateWorklogAndRetainRemainingEstimateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateWorklogAndRetainRemainingEstimateAsync() {
            this.updateWorklogAndRetainRemainingEstimateAsync(null);
        }
        
        public void updateWorklogAndRetainRemainingEstimateAsync(object userState) {
            if ((this.onBeginupdateWorklogAndRetainRemainingEstimateDelegate == null)) {
                this.onBeginupdateWorklogAndRetainRemainingEstimateDelegate = new BeginOperationDelegate(this.OnBeginupdateWorklogAndRetainRemainingEstimate);
            }
            if ((this.onEndupdateWorklogAndRetainRemainingEstimateDelegate == null)) {
                this.onEndupdateWorklogAndRetainRemainingEstimateDelegate = new EndOperationDelegate(this.OnEndupdateWorklogAndRetainRemainingEstimate);
            }
            if ((this.onupdateWorklogAndRetainRemainingEstimateCompletedDelegate == null)) {
                this.onupdateWorklogAndRetainRemainingEstimateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateWorklogAndRetainRemainingEstimateCompleted);
            }
            base.InvokeAsync(this.onBeginupdateWorklogAndRetainRemainingEstimateDelegate, null, this.onEndupdateWorklogAndRetainRemainingEstimateDelegate, this.onupdateWorklogAndRetainRemainingEstimateCompletedDelegate, userState);
        }
        
        public void updateWorklogWithNewRemainingEstimate() {
            base.Channel.updateWorklogWithNewRemainingEstimate();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateWorklogWithNewRemainingEstimate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateWorklogWithNewRemainingEstimate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateWorklogWithNewRemainingEstimate(System.IAsyncResult result) {
            base.Channel.EndupdateWorklogWithNewRemainingEstimate(result);
        }
        
        private System.IAsyncResult OnBeginupdateWorklogWithNewRemainingEstimate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginupdateWorklogWithNewRemainingEstimate(callback, asyncState);
        }
        
        private object[] OnEndupdateWorklogWithNewRemainingEstimate(System.IAsyncResult result) {
            this.EndupdateWorklogWithNewRemainingEstimate(result);
            return null;
        }
        
        private void OnupdateWorklogWithNewRemainingEstimateCompleted(object state) {
            if ((this.updateWorklogWithNewRemainingEstimateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateWorklogWithNewRemainingEstimateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateWorklogWithNewRemainingEstimateAsync() {
            this.updateWorklogWithNewRemainingEstimateAsync(null);
        }
        
        public void updateWorklogWithNewRemainingEstimateAsync(object userState) {
            if ((this.onBeginupdateWorklogWithNewRemainingEstimateDelegate == null)) {
                this.onBeginupdateWorklogWithNewRemainingEstimateDelegate = new BeginOperationDelegate(this.OnBeginupdateWorklogWithNewRemainingEstimate);
            }
            if ((this.onEndupdateWorklogWithNewRemainingEstimateDelegate == null)) {
                this.onEndupdateWorklogWithNewRemainingEstimateDelegate = new EndOperationDelegate(this.OnEndupdateWorklogWithNewRemainingEstimate);
            }
            if ((this.onupdateWorklogWithNewRemainingEstimateCompletedDelegate == null)) {
                this.onupdateWorklogWithNewRemainingEstimateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateWorklogWithNewRemainingEstimateCompleted);
            }
            base.InvokeAsync(this.onBeginupdateWorklogWithNewRemainingEstimateDelegate, null, this.onEndupdateWorklogWithNewRemainingEstimateDelegate, this.onupdateWorklogWithNewRemainingEstimateCompletedDelegate, userState);
        }
        
        public void getWorklogs() {
            base.Channel.getWorklogs();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetWorklogs(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetWorklogs(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetWorklogs(System.IAsyncResult result) {
            base.Channel.EndgetWorklogs(result);
        }
        
        private System.IAsyncResult OnBegingetWorklogs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetWorklogs(callback, asyncState);
        }
        
        private object[] OnEndgetWorklogs(System.IAsyncResult result) {
            this.EndgetWorklogs(result);
            return null;
        }
        
        private void OngetWorklogsCompleted(object state) {
            if ((this.getWorklogsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getWorklogsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getWorklogsAsync() {
            this.getWorklogsAsync(null);
        }
        
        public void getWorklogsAsync(object userState) {
            if ((this.onBegingetWorklogsDelegate == null)) {
                this.onBegingetWorklogsDelegate = new BeginOperationDelegate(this.OnBegingetWorklogs);
            }
            if ((this.onEndgetWorklogsDelegate == null)) {
                this.onEndgetWorklogsDelegate = new EndOperationDelegate(this.OnEndgetWorklogs);
            }
            if ((this.ongetWorklogsCompletedDelegate == null)) {
                this.ongetWorklogsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetWorklogsCompleted);
            }
            base.InvokeAsync(this.onBegingetWorklogsDelegate, null, this.onEndgetWorklogsDelegate, this.ongetWorklogsCompletedDelegate, userState);
        }
        
        public void hasPermissionToCreateWorklog() {
            base.Channel.hasPermissionToCreateWorklog();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginhasPermissionToCreateWorklog(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginhasPermissionToCreateWorklog(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndhasPermissionToCreateWorklog(System.IAsyncResult result) {
            base.Channel.EndhasPermissionToCreateWorklog(result);
        }
        
        private System.IAsyncResult OnBeginhasPermissionToCreateWorklog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginhasPermissionToCreateWorklog(callback, asyncState);
        }
        
        private object[] OnEndhasPermissionToCreateWorklog(System.IAsyncResult result) {
            this.EndhasPermissionToCreateWorklog(result);
            return null;
        }
        
        private void OnhasPermissionToCreateWorklogCompleted(object state) {
            if ((this.hasPermissionToCreateWorklogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.hasPermissionToCreateWorklogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void hasPermissionToCreateWorklogAsync() {
            this.hasPermissionToCreateWorklogAsync(null);
        }
        
        public void hasPermissionToCreateWorklogAsync(object userState) {
            if ((this.onBeginhasPermissionToCreateWorklogDelegate == null)) {
                this.onBeginhasPermissionToCreateWorklogDelegate = new BeginOperationDelegate(this.OnBeginhasPermissionToCreateWorklog);
            }
            if ((this.onEndhasPermissionToCreateWorklogDelegate == null)) {
                this.onEndhasPermissionToCreateWorklogDelegate = new EndOperationDelegate(this.OnEndhasPermissionToCreateWorklog);
            }
            if ((this.onhasPermissionToCreateWorklogCompletedDelegate == null)) {
                this.onhasPermissionToCreateWorklogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnhasPermissionToCreateWorklogCompleted);
            }
            base.InvokeAsync(this.onBeginhasPermissionToCreateWorklogDelegate, null, this.onEndhasPermissionToCreateWorklogDelegate, this.onhasPermissionToCreateWorklogCompletedDelegate, userState);
        }
        
        public void hasPermissionToDeleteWorklog() {
            base.Channel.hasPermissionToDeleteWorklog();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginhasPermissionToDeleteWorklog(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginhasPermissionToDeleteWorklog(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndhasPermissionToDeleteWorklog(System.IAsyncResult result) {
            base.Channel.EndhasPermissionToDeleteWorklog(result);
        }
        
        private System.IAsyncResult OnBeginhasPermissionToDeleteWorklog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginhasPermissionToDeleteWorklog(callback, asyncState);
        }
        
        private object[] OnEndhasPermissionToDeleteWorklog(System.IAsyncResult result) {
            this.EndhasPermissionToDeleteWorklog(result);
            return null;
        }
        
        private void OnhasPermissionToDeleteWorklogCompleted(object state) {
            if ((this.hasPermissionToDeleteWorklogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.hasPermissionToDeleteWorklogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void hasPermissionToDeleteWorklogAsync() {
            this.hasPermissionToDeleteWorklogAsync(null);
        }
        
        public void hasPermissionToDeleteWorklogAsync(object userState) {
            if ((this.onBeginhasPermissionToDeleteWorklogDelegate == null)) {
                this.onBeginhasPermissionToDeleteWorklogDelegate = new BeginOperationDelegate(this.OnBeginhasPermissionToDeleteWorklog);
            }
            if ((this.onEndhasPermissionToDeleteWorklogDelegate == null)) {
                this.onEndhasPermissionToDeleteWorklogDelegate = new EndOperationDelegate(this.OnEndhasPermissionToDeleteWorklog);
            }
            if ((this.onhasPermissionToDeleteWorklogCompletedDelegate == null)) {
                this.onhasPermissionToDeleteWorklogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnhasPermissionToDeleteWorklogCompleted);
            }
            base.InvokeAsync(this.onBeginhasPermissionToDeleteWorklogDelegate, null, this.onEndhasPermissionToDeleteWorklogDelegate, this.onhasPermissionToDeleteWorklogCompletedDelegate, userState);
        }
        
        public void hasPermissionToUpdateWorklog() {
            base.Channel.hasPermissionToUpdateWorklog();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginhasPermissionToUpdateWorklog(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginhasPermissionToUpdateWorklog(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndhasPermissionToUpdateWorklog(System.IAsyncResult result) {
            base.Channel.EndhasPermissionToUpdateWorklog(result);
        }
        
        private System.IAsyncResult OnBeginhasPermissionToUpdateWorklog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginhasPermissionToUpdateWorklog(callback, asyncState);
        }
        
        private object[] OnEndhasPermissionToUpdateWorklog(System.IAsyncResult result) {
            this.EndhasPermissionToUpdateWorklog(result);
            return null;
        }
        
        private void OnhasPermissionToUpdateWorklogCompleted(object state) {
            if ((this.hasPermissionToUpdateWorklogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.hasPermissionToUpdateWorklogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void hasPermissionToUpdateWorklogAsync() {
            this.hasPermissionToUpdateWorklogAsync(null);
        }
        
        public void hasPermissionToUpdateWorklogAsync(object userState) {
            if ((this.onBeginhasPermissionToUpdateWorklogDelegate == null)) {
                this.onBeginhasPermissionToUpdateWorklogDelegate = new BeginOperationDelegate(this.OnBeginhasPermissionToUpdateWorklog);
            }
            if ((this.onEndhasPermissionToUpdateWorklogDelegate == null)) {
                this.onEndhasPermissionToUpdateWorklogDelegate = new EndOperationDelegate(this.OnEndhasPermissionToUpdateWorklog);
            }
            if ((this.onhasPermissionToUpdateWorklogCompletedDelegate == null)) {
                this.onhasPermissionToUpdateWorklogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnhasPermissionToUpdateWorklogCompleted);
            }
            base.InvokeAsync(this.onBeginhasPermissionToUpdateWorklogDelegate, null, this.onEndhasPermissionToUpdateWorklogDelegate, this.onhasPermissionToUpdateWorklogCompletedDelegate, userState);
        }
        
        public void getResolutionDateByKey() {
            base.Channel.getResolutionDateByKey();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetResolutionDateByKey(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetResolutionDateByKey(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetResolutionDateByKey(System.IAsyncResult result) {
            base.Channel.EndgetResolutionDateByKey(result);
        }
        
        private System.IAsyncResult OnBegingetResolutionDateByKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetResolutionDateByKey(callback, asyncState);
        }
        
        private object[] OnEndgetResolutionDateByKey(System.IAsyncResult result) {
            this.EndgetResolutionDateByKey(result);
            return null;
        }
        
        private void OngetResolutionDateByKeyCompleted(object state) {
            if ((this.getResolutionDateByKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getResolutionDateByKeyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getResolutionDateByKeyAsync() {
            this.getResolutionDateByKeyAsync(null);
        }
        
        public void getResolutionDateByKeyAsync(object userState) {
            if ((this.onBegingetResolutionDateByKeyDelegate == null)) {
                this.onBegingetResolutionDateByKeyDelegate = new BeginOperationDelegate(this.OnBegingetResolutionDateByKey);
            }
            if ((this.onEndgetResolutionDateByKeyDelegate == null)) {
                this.onEndgetResolutionDateByKeyDelegate = new EndOperationDelegate(this.OnEndgetResolutionDateByKey);
            }
            if ((this.ongetResolutionDateByKeyCompletedDelegate == null)) {
                this.ongetResolutionDateByKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetResolutionDateByKeyCompleted);
            }
            base.InvokeAsync(this.onBegingetResolutionDateByKeyDelegate, null, this.onEndgetResolutionDateByKeyDelegate, this.ongetResolutionDateByKeyCompletedDelegate, userState);
        }
        
        public void getResolutionDateById() {
            base.Channel.getResolutionDateById();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetResolutionDateById(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetResolutionDateById(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetResolutionDateById(System.IAsyncResult result) {
            base.Channel.EndgetResolutionDateById(result);
        }
        
        private System.IAsyncResult OnBegingetResolutionDateById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetResolutionDateById(callback, asyncState);
        }
        
        private object[] OnEndgetResolutionDateById(System.IAsyncResult result) {
            this.EndgetResolutionDateById(result);
            return null;
        }
        
        private void OngetResolutionDateByIdCompleted(object state) {
            if ((this.getResolutionDateByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getResolutionDateByIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getResolutionDateByIdAsync() {
            this.getResolutionDateByIdAsync(null);
        }
        
        public void getResolutionDateByIdAsync(object userState) {
            if ((this.onBegingetResolutionDateByIdDelegate == null)) {
                this.onBegingetResolutionDateByIdDelegate = new BeginOperationDelegate(this.OnBegingetResolutionDateById);
            }
            if ((this.onEndgetResolutionDateByIdDelegate == null)) {
                this.onEndgetResolutionDateByIdDelegate = new EndOperationDelegate(this.OnEndgetResolutionDateById);
            }
            if ((this.ongetResolutionDateByIdCompletedDelegate == null)) {
                this.ongetResolutionDateByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetResolutionDateByIdCompleted);
            }
            base.InvokeAsync(this.onBegingetResolutionDateByIdDelegate, null, this.onEndgetResolutionDateByIdDelegate, this.ongetResolutionDateByIdCompletedDelegate, userState);
        }
        
        public void getIssueCountForFilter() {
            base.Channel.getIssueCountForFilter();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetIssueCountForFilter(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetIssueCountForFilter(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetIssueCountForFilter(System.IAsyncResult result) {
            base.Channel.EndgetIssueCountForFilter(result);
        }
        
        private System.IAsyncResult OnBegingetIssueCountForFilter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetIssueCountForFilter(callback, asyncState);
        }
        
        private object[] OnEndgetIssueCountForFilter(System.IAsyncResult result) {
            this.EndgetIssueCountForFilter(result);
            return null;
        }
        
        private void OngetIssueCountForFilterCompleted(object state) {
            if ((this.getIssueCountForFilterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getIssueCountForFilterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getIssueCountForFilterAsync() {
            this.getIssueCountForFilterAsync(null);
        }
        
        public void getIssueCountForFilterAsync(object userState) {
            if ((this.onBegingetIssueCountForFilterDelegate == null)) {
                this.onBegingetIssueCountForFilterDelegate = new BeginOperationDelegate(this.OnBegingetIssueCountForFilter);
            }
            if ((this.onEndgetIssueCountForFilterDelegate == null)) {
                this.onEndgetIssueCountForFilterDelegate = new EndOperationDelegate(this.OnEndgetIssueCountForFilter);
            }
            if ((this.ongetIssueCountForFilterCompletedDelegate == null)) {
                this.ongetIssueCountForFilterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetIssueCountForFilterCompleted);
            }
            base.InvokeAsync(this.onBegingetIssueCountForFilterDelegate, null, this.onEndgetIssueCountForFilterDelegate, this.ongetIssueCountForFilterCompletedDelegate, userState);
        }
        
        public void getIssuesFromTextSearch() {
            base.Channel.getIssuesFromTextSearch();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetIssuesFromTextSearch(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetIssuesFromTextSearch(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetIssuesFromTextSearch(System.IAsyncResult result) {
            base.Channel.EndgetIssuesFromTextSearch(result);
        }
        
        private System.IAsyncResult OnBegingetIssuesFromTextSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetIssuesFromTextSearch(callback, asyncState);
        }
        
        private object[] OnEndgetIssuesFromTextSearch(System.IAsyncResult result) {
            this.EndgetIssuesFromTextSearch(result);
            return null;
        }
        
        private void OngetIssuesFromTextSearchCompleted(object state) {
            if ((this.getIssuesFromTextSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getIssuesFromTextSearchCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getIssuesFromTextSearchAsync() {
            this.getIssuesFromTextSearchAsync(null);
        }
        
        public void getIssuesFromTextSearchAsync(object userState) {
            if ((this.onBegingetIssuesFromTextSearchDelegate == null)) {
                this.onBegingetIssuesFromTextSearchDelegate = new BeginOperationDelegate(this.OnBegingetIssuesFromTextSearch);
            }
            if ((this.onEndgetIssuesFromTextSearchDelegate == null)) {
                this.onEndgetIssuesFromTextSearchDelegate = new EndOperationDelegate(this.OnEndgetIssuesFromTextSearch);
            }
            if ((this.ongetIssuesFromTextSearchCompletedDelegate == null)) {
                this.ongetIssuesFromTextSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetIssuesFromTextSearchCompleted);
            }
            base.InvokeAsync(this.onBegingetIssuesFromTextSearchDelegate, null, this.onEndgetIssuesFromTextSearchDelegate, this.ongetIssuesFromTextSearchCompletedDelegate, userState);
        }
        
        public void getIssuesFromTextSearchWithProject() {
            base.Channel.getIssuesFromTextSearchWithProject();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetIssuesFromTextSearchWithProject(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetIssuesFromTextSearchWithProject(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetIssuesFromTextSearchWithProject(System.IAsyncResult result) {
            base.Channel.EndgetIssuesFromTextSearchWithProject(result);
        }
        
        private System.IAsyncResult OnBegingetIssuesFromTextSearchWithProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetIssuesFromTextSearchWithProject(callback, asyncState);
        }
        
        private object[] OnEndgetIssuesFromTextSearchWithProject(System.IAsyncResult result) {
            this.EndgetIssuesFromTextSearchWithProject(result);
            return null;
        }
        
        private void OngetIssuesFromTextSearchWithProjectCompleted(object state) {
            if ((this.getIssuesFromTextSearchWithProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getIssuesFromTextSearchWithProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getIssuesFromTextSearchWithProjectAsync() {
            this.getIssuesFromTextSearchWithProjectAsync(null);
        }
        
        public void getIssuesFromTextSearchWithProjectAsync(object userState) {
            if ((this.onBegingetIssuesFromTextSearchWithProjectDelegate == null)) {
                this.onBegingetIssuesFromTextSearchWithProjectDelegate = new BeginOperationDelegate(this.OnBegingetIssuesFromTextSearchWithProject);
            }
            if ((this.onEndgetIssuesFromTextSearchWithProjectDelegate == null)) {
                this.onEndgetIssuesFromTextSearchWithProjectDelegate = new EndOperationDelegate(this.OnEndgetIssuesFromTextSearchWithProject);
            }
            if ((this.ongetIssuesFromTextSearchWithProjectCompletedDelegate == null)) {
                this.ongetIssuesFromTextSearchWithProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetIssuesFromTextSearchWithProjectCompleted);
            }
            base.InvokeAsync(this.onBegingetIssuesFromTextSearchWithProjectDelegate, null, this.onEndgetIssuesFromTextSearchWithProjectDelegate, this.ongetIssuesFromTextSearchWithProjectCompletedDelegate, userState);
        }
        
        public void getIssuesFromJqlSearch() {
            base.Channel.getIssuesFromJqlSearch();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetIssuesFromJqlSearch(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetIssuesFromJqlSearch(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetIssuesFromJqlSearch(System.IAsyncResult result) {
            base.Channel.EndgetIssuesFromJqlSearch(result);
        }
        
        private System.IAsyncResult OnBegingetIssuesFromJqlSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetIssuesFromJqlSearch(callback, asyncState);
        }
        
        private object[] OnEndgetIssuesFromJqlSearch(System.IAsyncResult result) {
            this.EndgetIssuesFromJqlSearch(result);
            return null;
        }
        
        private void OngetIssuesFromJqlSearchCompleted(object state) {
            if ((this.getIssuesFromJqlSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getIssuesFromJqlSearchCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getIssuesFromJqlSearchAsync() {
            this.getIssuesFromJqlSearchAsync(null);
        }
        
        public void getIssuesFromJqlSearchAsync(object userState) {
            if ((this.onBegingetIssuesFromJqlSearchDelegate == null)) {
                this.onBegingetIssuesFromJqlSearchDelegate = new BeginOperationDelegate(this.OnBegingetIssuesFromJqlSearch);
            }
            if ((this.onEndgetIssuesFromJqlSearchDelegate == null)) {
                this.onEndgetIssuesFromJqlSearchDelegate = new EndOperationDelegate(this.OnEndgetIssuesFromJqlSearch);
            }
            if ((this.ongetIssuesFromJqlSearchCompletedDelegate == null)) {
                this.ongetIssuesFromJqlSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetIssuesFromJqlSearchCompleted);
            }
            base.InvokeAsync(this.onBegingetIssuesFromJqlSearchDelegate, null, this.onEndgetIssuesFromJqlSearchDelegate, this.ongetIssuesFromJqlSearchCompletedDelegate, userState);
        }
        
        public void setUserPassword() {
            base.Channel.setUserPassword();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsetUserPassword(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetUserPassword(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsetUserPassword(System.IAsyncResult result) {
            base.Channel.EndsetUserPassword(result);
        }
        
        private System.IAsyncResult OnBeginsetUserPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginsetUserPassword(callback, asyncState);
        }
        
        private object[] OnEndsetUserPassword(System.IAsyncResult result) {
            this.EndsetUserPassword(result);
            return null;
        }
        
        private void OnsetUserPasswordCompleted(object state) {
            if ((this.setUserPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setUserPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setUserPasswordAsync() {
            this.setUserPasswordAsync(null);
        }
        
        public void setUserPasswordAsync(object userState) {
            if ((this.onBeginsetUserPasswordDelegate == null)) {
                this.onBeginsetUserPasswordDelegate = new BeginOperationDelegate(this.OnBeginsetUserPassword);
            }
            if ((this.onEndsetUserPasswordDelegate == null)) {
                this.onEndsetUserPasswordDelegate = new EndOperationDelegate(this.OnEndsetUserPassword);
            }
            if ((this.onsetUserPasswordCompletedDelegate == null)) {
                this.onsetUserPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetUserPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginsetUserPasswordDelegate, null, this.onEndsetUserPasswordDelegate, this.onsetUserPasswordCompletedDelegate, userState);
        }
        
        public void deleteUser() {
            base.Channel.deleteUser();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeleteUser(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteUser(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnddeleteUser(System.IAsyncResult result) {
            base.Channel.EnddeleteUser(result);
        }
        
        private System.IAsyncResult OnBegindeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegindeleteUser(callback, asyncState);
        }
        
        private object[] OnEnddeleteUser(System.IAsyncResult result) {
            this.EnddeleteUser(result);
            return null;
        }
        
        private void OndeleteUserCompleted(object state) {
            if ((this.deleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteUserAsync() {
            this.deleteUserAsync(null);
        }
        
        public void deleteUserAsync(object userState) {
            if ((this.onBegindeleteUserDelegate == null)) {
                this.onBegindeleteUserDelegate = new BeginOperationDelegate(this.OnBegindeleteUser);
            }
            if ((this.onEnddeleteUserDelegate == null)) {
                this.onEnddeleteUserDelegate = new EndOperationDelegate(this.OnEnddeleteUser);
            }
            if ((this.ondeleteUserCompletedDelegate == null)) {
                this.ondeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteUserCompleted);
            }
            base.InvokeAsync(this.onBegindeleteUserDelegate, null, this.onEnddeleteUserDelegate, this.ondeleteUserCompletedDelegate, userState);
        }
        
        public void deleteGroup() {
            base.Channel.deleteGroup();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeleteGroup(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteGroup(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EnddeleteGroup(System.IAsyncResult result) {
            base.Channel.EnddeleteGroup(result);
        }
        
        private System.IAsyncResult OnBegindeleteGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegindeleteGroup(callback, asyncState);
        }
        
        private object[] OnEnddeleteGroup(System.IAsyncResult result) {
            this.EnddeleteGroup(result);
            return null;
        }
        
        private void OndeleteGroupCompleted(object state) {
            if ((this.deleteGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteGroupAsync() {
            this.deleteGroupAsync(null);
        }
        
        public void deleteGroupAsync(object userState) {
            if ((this.onBegindeleteGroupDelegate == null)) {
                this.onBegindeleteGroupDelegate = new BeginOperationDelegate(this.OnBegindeleteGroup);
            }
            if ((this.onEnddeleteGroupDelegate == null)) {
                this.onEnddeleteGroupDelegate = new EndOperationDelegate(this.OnEnddeleteGroup);
            }
            if ((this.ondeleteGroupCompletedDelegate == null)) {
                this.ondeleteGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteGroupCompleted);
            }
            base.InvokeAsync(this.onBegindeleteGroupDelegate, null, this.onEnddeleteGroupDelegate, this.ondeleteGroupCompletedDelegate, userState);
        }
        
        public void refreshCustomFields() {
            base.Channel.refreshCustomFields();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginrefreshCustomFields(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginrefreshCustomFields(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndrefreshCustomFields(System.IAsyncResult result) {
            base.Channel.EndrefreshCustomFields(result);
        }
        
        private System.IAsyncResult OnBeginrefreshCustomFields(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginrefreshCustomFields(callback, asyncState);
        }
        
        private object[] OnEndrefreshCustomFields(System.IAsyncResult result) {
            this.EndrefreshCustomFields(result);
            return null;
        }
        
        private void OnrefreshCustomFieldsCompleted(object state) {
            if ((this.refreshCustomFieldsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.refreshCustomFieldsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void refreshCustomFieldsAsync() {
            this.refreshCustomFieldsAsync(null);
        }
        
        public void refreshCustomFieldsAsync(object userState) {
            if ((this.onBeginrefreshCustomFieldsDelegate == null)) {
                this.onBeginrefreshCustomFieldsDelegate = new BeginOperationDelegate(this.OnBeginrefreshCustomFields);
            }
            if ((this.onEndrefreshCustomFieldsDelegate == null)) {
                this.onEndrefreshCustomFieldsDelegate = new EndOperationDelegate(this.OnEndrefreshCustomFields);
            }
            if ((this.onrefreshCustomFieldsCompletedDelegate == null)) {
                this.onrefreshCustomFieldsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnrefreshCustomFieldsCompleted);
            }
            base.InvokeAsync(this.onBeginrefreshCustomFieldsDelegate, null, this.onEndrefreshCustomFieldsDelegate, this.onrefreshCustomFieldsCompletedDelegate, userState);
        }
        
        public void getProjectsNoSchemes() {
            base.Channel.getProjectsNoSchemes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProjectsNoSchemes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProjectsNoSchemes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetProjectsNoSchemes(System.IAsyncResult result) {
            base.Channel.EndgetProjectsNoSchemes(result);
        }
        
        private System.IAsyncResult OnBegingetProjectsNoSchemes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetProjectsNoSchemes(callback, asyncState);
        }
        
        private object[] OnEndgetProjectsNoSchemes(System.IAsyncResult result) {
            this.EndgetProjectsNoSchemes(result);
            return null;
        }
        
        private void OngetProjectsNoSchemesCompleted(object state) {
            if ((this.getProjectsNoSchemesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getProjectsNoSchemesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getProjectsNoSchemesAsync() {
            this.getProjectsNoSchemesAsync(null);
        }
        
        public void getProjectsNoSchemesAsync(object userState) {
            if ((this.onBegingetProjectsNoSchemesDelegate == null)) {
                this.onBegingetProjectsNoSchemesDelegate = new BeginOperationDelegate(this.OnBegingetProjectsNoSchemes);
            }
            if ((this.onEndgetProjectsNoSchemesDelegate == null)) {
                this.onEndgetProjectsNoSchemesDelegate = new EndOperationDelegate(this.OnEndgetProjectsNoSchemes);
            }
            if ((this.ongetProjectsNoSchemesCompletedDelegate == null)) {
                this.ongetProjectsNoSchemesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetProjectsNoSchemesCompleted);
            }
            base.InvokeAsync(this.onBegingetProjectsNoSchemesDelegate, null, this.onEndgetProjectsNoSchemesDelegate, this.ongetProjectsNoSchemesCompletedDelegate, userState);
        }
        
        public void addVersion() {
            base.Channel.addVersion();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndaddVersion(System.IAsyncResult result) {
            base.Channel.EndaddVersion(result);
        }
        
        private System.IAsyncResult OnBeginaddVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginaddVersion(callback, asyncState);
        }
        
        private object[] OnEndaddVersion(System.IAsyncResult result) {
            this.EndaddVersion(result);
            return null;
        }
        
        private void OnaddVersionCompleted(object state) {
            if ((this.addVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addVersionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addVersionAsync() {
            this.addVersionAsync(null);
        }
        
        public void addVersionAsync(object userState) {
            if ((this.onBeginaddVersionDelegate == null)) {
                this.onBeginaddVersionDelegate = new BeginOperationDelegate(this.OnBeginaddVersion);
            }
            if ((this.onEndaddVersionDelegate == null)) {
                this.onEndaddVersionDelegate = new EndOperationDelegate(this.OnEndaddVersion);
            }
            if ((this.onaddVersionCompletedDelegate == null)) {
                this.onaddVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddVersionCompleted);
            }
            base.InvokeAsync(this.onBeginaddVersionDelegate, null, this.onEndaddVersionDelegate, this.onaddVersionCompletedDelegate, userState);
        }
        
        public void getSavedFilters() {
            base.Channel.getSavedFilters();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSavedFilters(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSavedFilters(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetSavedFilters(System.IAsyncResult result) {
            base.Channel.EndgetSavedFilters(result);
        }
        
        private System.IAsyncResult OnBegingetSavedFilters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetSavedFilters(callback, asyncState);
        }
        
        private object[] OnEndgetSavedFilters(System.IAsyncResult result) {
            this.EndgetSavedFilters(result);
            return null;
        }
        
        private void OngetSavedFiltersCompleted(object state) {
            if ((this.getSavedFiltersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSavedFiltersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSavedFiltersAsync() {
            this.getSavedFiltersAsync(null);
        }
        
        public void getSavedFiltersAsync(object userState) {
            if ((this.onBegingetSavedFiltersDelegate == null)) {
                this.onBegingetSavedFiltersDelegate = new BeginOperationDelegate(this.OnBegingetSavedFilters);
            }
            if ((this.onEndgetSavedFiltersDelegate == null)) {
                this.onEndgetSavedFiltersDelegate = new EndOperationDelegate(this.OnEndgetSavedFilters);
            }
            if ((this.ongetSavedFiltersCompletedDelegate == null)) {
                this.ongetSavedFiltersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSavedFiltersCompleted);
            }
            base.InvokeAsync(this.onBegingetSavedFiltersDelegate, null, this.onEndgetSavedFiltersDelegate, this.ongetSavedFiltersCompletedDelegate, userState);
        }
        
        public void createIssueWithParent() {
            base.Channel.createIssueWithParent();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincreateIssueWithParent(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateIssueWithParent(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndcreateIssueWithParent(System.IAsyncResult result) {
            base.Channel.EndcreateIssueWithParent(result);
        }
        
        private System.IAsyncResult OnBegincreateIssueWithParent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegincreateIssueWithParent(callback, asyncState);
        }
        
        private object[] OnEndcreateIssueWithParent(System.IAsyncResult result) {
            this.EndcreateIssueWithParent(result);
            return null;
        }
        
        private void OncreateIssueWithParentCompleted(object state) {
            if ((this.createIssueWithParentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createIssueWithParentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createIssueWithParentAsync() {
            this.createIssueWithParentAsync(null);
        }
        
        public void createIssueWithParentAsync(object userState) {
            if ((this.onBegincreateIssueWithParentDelegate == null)) {
                this.onBegincreateIssueWithParentDelegate = new BeginOperationDelegate(this.OnBegincreateIssueWithParent);
            }
            if ((this.onEndcreateIssueWithParentDelegate == null)) {
                this.onEndcreateIssueWithParentDelegate = new EndOperationDelegate(this.OnEndcreateIssueWithParent);
            }
            if ((this.oncreateIssueWithParentCompletedDelegate == null)) {
                this.oncreateIssueWithParentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateIssueWithParentCompleted);
            }
            base.InvokeAsync(this.onBegincreateIssueWithParentDelegate, null, this.onEndcreateIssueWithParentDelegate, this.oncreateIssueWithParentCompletedDelegate, userState);
        }
        
        public void createIssueWithParentWithSecurityLevel() {
            base.Channel.createIssueWithParentWithSecurityLevel();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincreateIssueWithParentWithSecurityLevel(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateIssueWithParentWithSecurityLevel(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndcreateIssueWithParentWithSecurityLevel(System.IAsyncResult result) {
            base.Channel.EndcreateIssueWithParentWithSecurityLevel(result);
        }
        
        private System.IAsyncResult OnBegincreateIssueWithParentWithSecurityLevel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegincreateIssueWithParentWithSecurityLevel(callback, asyncState);
        }
        
        private object[] OnEndcreateIssueWithParentWithSecurityLevel(System.IAsyncResult result) {
            this.EndcreateIssueWithParentWithSecurityLevel(result);
            return null;
        }
        
        private void OncreateIssueWithParentWithSecurityLevelCompleted(object state) {
            if ((this.createIssueWithParentWithSecurityLevelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createIssueWithParentWithSecurityLevelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createIssueWithParentWithSecurityLevelAsync() {
            this.createIssueWithParentWithSecurityLevelAsync(null);
        }
        
        public void createIssueWithParentWithSecurityLevelAsync(object userState) {
            if ((this.onBegincreateIssueWithParentWithSecurityLevelDelegate == null)) {
                this.onBegincreateIssueWithParentWithSecurityLevelDelegate = new BeginOperationDelegate(this.OnBegincreateIssueWithParentWithSecurityLevel);
            }
            if ((this.onEndcreateIssueWithParentWithSecurityLevelDelegate == null)) {
                this.onEndcreateIssueWithParentWithSecurityLevelDelegate = new EndOperationDelegate(this.OnEndcreateIssueWithParentWithSecurityLevel);
            }
            if ((this.oncreateIssueWithParentWithSecurityLevelCompletedDelegate == null)) {
                this.oncreateIssueWithParentWithSecurityLevelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateIssueWithParentWithSecurityLevelCompleted);
            }
            base.InvokeAsync(this.onBegincreateIssueWithParentWithSecurityLevelDelegate, null, this.onEndcreateIssueWithParentWithSecurityLevelDelegate, this.oncreateIssueWithParentWithSecurityLevelCompletedDelegate, userState);
        }
        
        public void addBase64EncodedAttachmentsToIssue() {
            base.Channel.addBase64EncodedAttachmentsToIssue();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddBase64EncodedAttachmentsToIssue(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddBase64EncodedAttachmentsToIssue(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndaddBase64EncodedAttachmentsToIssue(System.IAsyncResult result) {
            base.Channel.EndaddBase64EncodedAttachmentsToIssue(result);
        }
        
        private System.IAsyncResult OnBeginaddBase64EncodedAttachmentsToIssue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginaddBase64EncodedAttachmentsToIssue(callback, asyncState);
        }
        
        private object[] OnEndaddBase64EncodedAttachmentsToIssue(System.IAsyncResult result) {
            this.EndaddBase64EncodedAttachmentsToIssue(result);
            return null;
        }
        
        private void OnaddBase64EncodedAttachmentsToIssueCompleted(object state) {
            if ((this.addBase64EncodedAttachmentsToIssueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addBase64EncodedAttachmentsToIssueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addBase64EncodedAttachmentsToIssueAsync() {
            this.addBase64EncodedAttachmentsToIssueAsync(null);
        }
        
        public void addBase64EncodedAttachmentsToIssueAsync(object userState) {
            if ((this.onBeginaddBase64EncodedAttachmentsToIssueDelegate == null)) {
                this.onBeginaddBase64EncodedAttachmentsToIssueDelegate = new BeginOperationDelegate(this.OnBeginaddBase64EncodedAttachmentsToIssue);
            }
            if ((this.onEndaddBase64EncodedAttachmentsToIssueDelegate == null)) {
                this.onEndaddBase64EncodedAttachmentsToIssueDelegate = new EndOperationDelegate(this.OnEndaddBase64EncodedAttachmentsToIssue);
            }
            if ((this.onaddBase64EncodedAttachmentsToIssueCompletedDelegate == null)) {
                this.onaddBase64EncodedAttachmentsToIssueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddBase64EncodedAttachmentsToIssueCompleted);
            }
            base.InvokeAsync(this.onBeginaddBase64EncodedAttachmentsToIssueDelegate, null, this.onEndaddBase64EncodedAttachmentsToIssueDelegate, this.onaddBase64EncodedAttachmentsToIssueCompletedDelegate, userState);
        }
        
        public void createProjectFromObject() {
            base.Channel.createProjectFromObject();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincreateProjectFromObject(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateProjectFromObject(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndcreateProjectFromObject(System.IAsyncResult result) {
            base.Channel.EndcreateProjectFromObject(result);
        }
        
        private System.IAsyncResult OnBegincreateProjectFromObject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegincreateProjectFromObject(callback, asyncState);
        }
        
        private object[] OnEndcreateProjectFromObject(System.IAsyncResult result) {
            this.EndcreateProjectFromObject(result);
            return null;
        }
        
        private void OncreateProjectFromObjectCompleted(object state) {
            if ((this.createProjectFromObjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createProjectFromObjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createProjectFromObjectAsync() {
            this.createProjectFromObjectAsync(null);
        }
        
        public void createProjectFromObjectAsync(object userState) {
            if ((this.onBegincreateProjectFromObjectDelegate == null)) {
                this.onBegincreateProjectFromObjectDelegate = new BeginOperationDelegate(this.OnBegincreateProjectFromObject);
            }
            if ((this.onEndcreateProjectFromObjectDelegate == null)) {
                this.onEndcreateProjectFromObjectDelegate = new EndOperationDelegate(this.OnEndcreateProjectFromObject);
            }
            if ((this.oncreateProjectFromObjectCompletedDelegate == null)) {
                this.oncreateProjectFromObjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateProjectFromObjectCompleted);
            }
            base.InvokeAsync(this.onBegincreateProjectFromObjectDelegate, null, this.onEndcreateProjectFromObjectDelegate, this.oncreateProjectFromObjectCompletedDelegate, userState);
        }
        
        public void getSecuritySchemes() {
            base.Channel.getSecuritySchemes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSecuritySchemes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSecuritySchemes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetSecuritySchemes(System.IAsyncResult result) {
            base.Channel.EndgetSecuritySchemes(result);
        }
        
        private System.IAsyncResult OnBegingetSecuritySchemes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetSecuritySchemes(callback, asyncState);
        }
        
        private object[] OnEndgetSecuritySchemes(System.IAsyncResult result) {
            this.EndgetSecuritySchemes(result);
            return null;
        }
        
        private void OngetSecuritySchemesCompleted(object state) {
            if ((this.getSecuritySchemesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSecuritySchemesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSecuritySchemesAsync() {
            this.getSecuritySchemesAsync(null);
        }
        
        public void getSecuritySchemesAsync(object userState) {
            if ((this.onBegingetSecuritySchemesDelegate == null)) {
                this.onBegingetSecuritySchemesDelegate = new BeginOperationDelegate(this.OnBegingetSecuritySchemes);
            }
            if ((this.onEndgetSecuritySchemesDelegate == null)) {
                this.onEndgetSecuritySchemesDelegate = new EndOperationDelegate(this.OnEndgetSecuritySchemes);
            }
            if ((this.ongetSecuritySchemesCompletedDelegate == null)) {
                this.ongetSecuritySchemesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSecuritySchemesCompleted);
            }
            base.InvokeAsync(this.onBegingetSecuritySchemesDelegate, null, this.onEndgetSecuritySchemesDelegate, this.ongetSecuritySchemesCompletedDelegate, userState);
        }
        
        public void getIssuesFromFilter() {
            base.Channel.getIssuesFromFilter();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetIssuesFromFilter(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetIssuesFromFilter(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetIssuesFromFilter(System.IAsyncResult result) {
            base.Channel.EndgetIssuesFromFilter(result);
        }
        
        private System.IAsyncResult OnBegingetIssuesFromFilter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetIssuesFromFilter(callback, asyncState);
        }
        
        private object[] OnEndgetIssuesFromFilter(System.IAsyncResult result) {
            this.EndgetIssuesFromFilter(result);
            return null;
        }
        
        private void OngetIssuesFromFilterCompleted(object state) {
            if ((this.getIssuesFromFilterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getIssuesFromFilterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getIssuesFromFilterAsync() {
            this.getIssuesFromFilterAsync(null);
        }
        
        public void getIssuesFromFilterAsync(object userState) {
            if ((this.onBegingetIssuesFromFilterDelegate == null)) {
                this.onBegingetIssuesFromFilterDelegate = new BeginOperationDelegate(this.OnBegingetIssuesFromFilter);
            }
            if ((this.onEndgetIssuesFromFilterDelegate == null)) {
                this.onEndgetIssuesFromFilterDelegate = new EndOperationDelegate(this.OnEndgetIssuesFromFilter);
            }
            if ((this.ongetIssuesFromFilterCompletedDelegate == null)) {
                this.ongetIssuesFromFilterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetIssuesFromFilterCompleted);
            }
            base.InvokeAsync(this.onBegingetIssuesFromFilterDelegate, null, this.onEndgetIssuesFromFilterDelegate, this.ongetIssuesFromFilterCompletedDelegate, userState);
        }
        
        public void getIssuesFromFilterWithLimit() {
            base.Channel.getIssuesFromFilterWithLimit();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetIssuesFromFilterWithLimit(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetIssuesFromFilterWithLimit(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetIssuesFromFilterWithLimit(System.IAsyncResult result) {
            base.Channel.EndgetIssuesFromFilterWithLimit(result);
        }
        
        private System.IAsyncResult OnBegingetIssuesFromFilterWithLimit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetIssuesFromFilterWithLimit(callback, asyncState);
        }
        
        private object[] OnEndgetIssuesFromFilterWithLimit(System.IAsyncResult result) {
            this.EndgetIssuesFromFilterWithLimit(result);
            return null;
        }
        
        private void OngetIssuesFromFilterWithLimitCompleted(object state) {
            if ((this.getIssuesFromFilterWithLimitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getIssuesFromFilterWithLimitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getIssuesFromFilterWithLimitAsync() {
            this.getIssuesFromFilterWithLimitAsync(null);
        }
        
        public void getIssuesFromFilterWithLimitAsync(object userState) {
            if ((this.onBegingetIssuesFromFilterWithLimitDelegate == null)) {
                this.onBegingetIssuesFromFilterWithLimitDelegate = new BeginOperationDelegate(this.OnBegingetIssuesFromFilterWithLimit);
            }
            if ((this.onEndgetIssuesFromFilterWithLimitDelegate == null)) {
                this.onEndgetIssuesFromFilterWithLimitDelegate = new EndOperationDelegate(this.OnEndgetIssuesFromFilterWithLimit);
            }
            if ((this.ongetIssuesFromFilterWithLimitCompletedDelegate == null)) {
                this.ongetIssuesFromFilterWithLimitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetIssuesFromFilterWithLimitCompleted);
            }
            base.InvokeAsync(this.onBegingetIssuesFromFilterWithLimitDelegate, null, this.onEndgetIssuesFromFilterWithLimitDelegate, this.ongetIssuesFromFilterWithLimitCompletedDelegate, userState);
        }
        
        public void getIssuesFromTextSearchWithLimit() {
            base.Channel.getIssuesFromTextSearchWithLimit();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetIssuesFromTextSearchWithLimit(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetIssuesFromTextSearchWithLimit(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetIssuesFromTextSearchWithLimit(System.IAsyncResult result) {
            base.Channel.EndgetIssuesFromTextSearchWithLimit(result);
        }
        
        private System.IAsyncResult OnBegingetIssuesFromTextSearchWithLimit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetIssuesFromTextSearchWithLimit(callback, asyncState);
        }
        
        private object[] OnEndgetIssuesFromTextSearchWithLimit(System.IAsyncResult result) {
            this.EndgetIssuesFromTextSearchWithLimit(result);
            return null;
        }
        
        private void OngetIssuesFromTextSearchWithLimitCompleted(object state) {
            if ((this.getIssuesFromTextSearchWithLimitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getIssuesFromTextSearchWithLimitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getIssuesFromTextSearchWithLimitAsync() {
            this.getIssuesFromTextSearchWithLimitAsync(null);
        }
        
        public void getIssuesFromTextSearchWithLimitAsync(object userState) {
            if ((this.onBegingetIssuesFromTextSearchWithLimitDelegate == null)) {
                this.onBegingetIssuesFromTextSearchWithLimitDelegate = new BeginOperationDelegate(this.OnBegingetIssuesFromTextSearchWithLimit);
            }
            if ((this.onEndgetIssuesFromTextSearchWithLimitDelegate == null)) {
                this.onEndgetIssuesFromTextSearchWithLimitDelegate = new EndOperationDelegate(this.OnEndgetIssuesFromTextSearchWithLimit);
            }
            if ((this.ongetIssuesFromTextSearchWithLimitCompletedDelegate == null)) {
                this.ongetIssuesFromTextSearchWithLimitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetIssuesFromTextSearchWithLimitCompleted);
            }
            base.InvokeAsync(this.onBegingetIssuesFromTextSearchWithLimitDelegate, null, this.onEndgetIssuesFromTextSearchWithLimitDelegate, this.ongetIssuesFromTextSearchWithLimitCompletedDelegate, userState);
        }
        
        public void setNewProjectAvatar() {
            base.Channel.setNewProjectAvatar();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsetNewProjectAvatar(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetNewProjectAvatar(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsetNewProjectAvatar(System.IAsyncResult result) {
            base.Channel.EndsetNewProjectAvatar(result);
        }
        
        private System.IAsyncResult OnBeginsetNewProjectAvatar(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginsetNewProjectAvatar(callback, asyncState);
        }
        
        private object[] OnEndsetNewProjectAvatar(System.IAsyncResult result) {
            this.EndsetNewProjectAvatar(result);
            return null;
        }
        
        private void OnsetNewProjectAvatarCompleted(object state) {
            if ((this.setNewProjectAvatarCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setNewProjectAvatarCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setNewProjectAvatarAsync() {
            this.setNewProjectAvatarAsync(null);
        }
        
        public void setNewProjectAvatarAsync(object userState) {
            if ((this.onBeginsetNewProjectAvatarDelegate == null)) {
                this.onBeginsetNewProjectAvatarDelegate = new BeginOperationDelegate(this.OnBeginsetNewProjectAvatar);
            }
            if ((this.onEndsetNewProjectAvatarDelegate == null)) {
                this.onEndsetNewProjectAvatarDelegate = new EndOperationDelegate(this.OnEndsetNewProjectAvatar);
            }
            if ((this.onsetNewProjectAvatarCompletedDelegate == null)) {
                this.onsetNewProjectAvatarCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetNewProjectAvatarCompleted);
            }
            base.InvokeAsync(this.onBeginsetNewProjectAvatarDelegate, null, this.onEndsetNewProjectAvatarDelegate, this.onsetNewProjectAvatarCompletedDelegate, userState);
        }
    }
}
